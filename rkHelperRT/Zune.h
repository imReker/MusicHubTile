typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;
typedef LONG HRESULT;

#define CONST const
typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;
typedef FLOAT               *PFLOAT;
typedef BOOL near           *PBOOL;
typedef BOOL far            *LPBOOL;
typedef BYTE near           *PBYTE;
typedef BYTE far            *LPBYTE;
typedef int near            *PINT;
typedef int far             *LPINT;
typedef WORD near           *PWORD;
typedef WORD far            *LPWORD;
typedef long far            *LPLONG;
typedef DWORD near          *PDWORD;
typedef DWORD far           *LPDWORD;
typedef void far            *LPVOID;
typedef CONST void far      *LPCVOID;

typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int        *PUINT;

typedef DWORD LCID;
typedef void *PVOID;
typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;
    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;
    ULONGLONG QuadPart;
} ULARGE_INTEGER;
typedef void * HANDLE;
typedef LARGE_INTEGER *PLARGE_INTEGER;

typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef CONST WCHAR *LPCWCH, *PCWCH;

typedef  WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef  PWSTR *PZPWSTR;
typedef  CONST PWSTR *PCZPWSTR;
typedef  WCHAR *LPUWSTR, *PUWSTR;
typedef  CONST WCHAR *LPCWSTR, *PCWSTR;
typedef  PCWSTR *PZPCWSTR;
typedef  CONST WCHAR  *LPCUWSTR, *PCUWSTR;

typedef  WCHAR *PZZWSTR;
typedef  CONST WCHAR *PCZZWSTR;
typedef  WCHAR  *PUZZWSTR;
typedef  CONST WCHAR  *PCUZZWSTR;



typedef int (__stdcall *FARPROC)();

typedef struct _GUID {
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char  Data4[ 8 ];
} GUID;
typedef struct _FILETIME
    {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
    } 	FILETIME;


typedef struct _SYSTEMTIME
    {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
    } 	SYSTEMTIME;
typedef const WCHAR *LPCWSTR;
typedef ULONG DWORD;

typedef unsigned int size_t;

typedef ULONG HZMEDIALIST;

typedef ULONG HZMEDIAWORKITEM;

typedef ULONG ZMEDIAITEM;

typedef ULONG ZMEDIAITEMSTREAM;


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

//#include <rpc.h>
//#include <rpcndr.h>


#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

/* header files for imported files */
//#include "wtypes.h"
//#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_zmedialibtypes_0000_0000 */
/* [local] */ 

typedef unsigned int size_t;

typedef ULONG HZMEDIALIST;

typedef ULONG HZMEDIAWORKITEM;

typedef ULONG ZMEDIAITEM;

typedef ULONG ZMEDIAITEMSTREAM;

typedef 
enum _ZMEDIAITEM_TYPE
    {
        ZMEDIAITEM_TYPE_INVALID	= 0,
        ZMEDIAITEM_TYPE_AUDIO	= 0x1,
        ZMEDIAITEM_TYPE_VIDEO	= 0x2,
        ZMEDIAITEM_TYPE_PICTURE	= 0x3,
        ZMEDIAITEM_TYPE_UNKNOWN	= 0x4,
        ZMEDIAITEM_TYPE_FOLDER	= 0x5,
        ZMEDIAITEM_TYPE_ALBUM	= 0x6,
        ZMEDIAITEM_TYPE_PLAYLIST	= 0x7,
        ZMEDIAITEM_TYPE_ARTIST	= 0x8,
        ZMEDIAITEM_TYPE_AUDIOGENRE	= 0x9,
        ZMEDIAITEM_TYPE_VIDEOSERIES	= 0xa,
        ZMEDIAITEM_TYPE_DATERANGE	= 0xb,
        ZMEDIAITEM_TYPE_PICTUREALBUM	= 0xc,
        ZMEDIAITEM_TYPE_USERCARD	= 0xd,
        ZMEDIAITEM_TYPE_INBOXMSG	= 0xe,
        ZMEDIAITEM_TYPE_PODCASTSERIES	= 0xf,
        ZMEDIAITEM_TYPE_PODCASTAUDIO	= 0x10,
        ZMEDIAITEM_TYPE_AUDIOBOOK	= 0x11,
        ZMEDIAITEM_TYPE_AUDIOBOOKPART	= 0x12,
        ZMEDIAITEM_TYPE_GAME	= 0x13,
        ZMEDIAITEM_TYPE_GAMERUNTIME	= 0x14,
        ZMEDIAITEM_TYPE_GAMESTORAGE	= 0x15,
        ZMEDIAITEM_TYPE_CLOUDTASK	= 0x16,
        ZMEDIAITEM_TYPE_CLOUDJOB	= 0x17,
        ZMEDIAITEM_TYPE_CARTENTRY	= 0x18,
        ZMEDIAITEM_TYPE_QUICKLAUNCH_ITEM	= 0x19,
        ZMEDIAITEM_TYPE_BOOKMARK	= 0x1a,
        ZMEDIAITEM_TYPE_RADIOPRESET	= 0x1b,
        ZMEDIAITEM_TYPE_LETTER	= 0xfb,
        ZMEDIAITEM_TYPE_TRANSIENTPICTURE	= 0xfc,
        ZMEDIAITEM_TYPE_TRANSIENTAUDIO	= 0xfd,
        ZMEDIAITEM_TYPE_FIRMWARE	= 0xfe,
        _ZMEDIAITEM_TYPE_LIMIT	= ( ZMEDIAITEM_TYPE_FIRMWARE + 1 ) 
    } 	ZMEDIAITEM_TYPE;

typedef 
enum _ZMEDIALIST_TYPE
    {
        ZMEDIALIST_TYPE_INVALID	= 0,
        ZMEDIALIST_TYPE_ALL_AUDIO	= 1,
        ZMEDIALIST_TYPE_ALL_ALBUMS	= 2,
        ZMEDIALIST_TYPE_ALL_ARTISTS	= 3,
        ZMEDIALIST_TYPE_ALL_AUDIOGENRES	= 4,
        ZMEDIALIST_TYPE_ALL_PLAYLISTS	= 5,
        ZMEDIALIST_TYPE_ALL_VIDEOS	= 6,
        ZMEDIALIST_TYPE_ALL_PICTURES	= 7,
        ZMEDIALIST_TYPE_ALL_UNKNOWN	= 9,
        ZMEDIALIST_TYPE_ALL_PICTUREALBUMS	= 10,
        ZMEDIALIST_TYPE_ALL_DATERANGES	= 11,
        ZMEDIALIST_TYPE_ALL_USERCARDS	= 12,
        _ZMEDIALIST_TYPE_UNUSED1	= 13,
        ZMEDIALIST_TYPE_ALL_VIDEOSERIES	= 14,
        ZMEDIALIST_TYPE_ALL_PODCASTSERIES	= 15,
        ZMEDIALIST_TYPE_ALL_PODCASTAUDIO	= 16,
        _ZMEDIALIST_TYPE_UNUSED2	= 17,
        ZMEDIALIST_TYPE_ALL_INBOXMSGS	= 18,
        ZMEDIALIST_TYPE_ALL_AUDIO_GROUPBYALBUM	= 30,
        ZMEDIALIST_TYPE_ALL_ALBUMARTISTS	= 31,
        ZMEDIALIST_TYPE_ALL_ITEMS_BY_MEDIAID	= 32,
        ZMEDIALIST_TYPE_ALL_ITEMS_BY_FILEPATH	= 33,
        ZMEDIALIST_TYPE_ALBUM_AUDIO	= 40,
        ZMEDIALIST_TYPE_ALBUM_CONTENTS	= 41,
        ZMEDIALIST_TYPE_ARTIST_AUDIO	= 42,
        ZMEDIALIST_TYPE_ARTIST_ALBUMS	= 43,
        ZMEDIALIST_TYPE_ARTIST_CONTENTS	= 44,
        ZMEDIALIST_TYPE_AUDIOGENRE_AUDIO	= 45,
        ZMEDIALIST_TYPE_AUDIOGENRE_ALBUMS	= 46,
        ZMEDIALIST_TYPE_AUDIOGENRE_CONTENTS	= 47,
        ZMEDIALIST_TYPE_PLAYLIST_AUDIO	= 48,
        ZMEDIALIST_TYPE_PLAYLIST_CONTENTS	= 49,
        ZMEDIALIST_TYPE_ARTIST_AUDIO_ALL	= 50,
        ZMEDIALIST_TYPE_ARTIST_AUDIO_ALL_GROUPBYALBUM	= 51,
        ZMEDIALIST_TYPE_ARTIST_AUDIO_ON_STORAGELOCATION	= 52,
        ZMEDIALIST_TYPE_ALBUM_AUDIO_ON_STORAGELOCATION	= 53,
        ZMEDIALIST_TYPE_ARTIST_ALBUMS_ON_STORAGELOCATION	= 54,
        ZMEDIALIST_TYPE_GENRE_AUDIO_ON_STORAGELOCATION	= 55,
        ZMEDIALIST_TYPE_DATERANGE_PICTURES	= 60,
        ZMEDIALIST_TYPE_DATERANGE_CONTENTS	= 61,
        ZMEDIALIST_TYPE_PICTUREALBUM_PICTURES	= 62,
        ZMEDIALIST_TYPE_PICTUREALBUM_PICTUREALBUMS	= 63,
        ZMEDIALIST_TYPE_PICTUREALBUM_CONTENTS	= 64,
        ZMEDIALIST_TYPE_FOLDER_AUDIO	= 70,
        ZMEDIALIST_TYPE_FOLDER_VIDEOS	= 71,
        ZMEDIALIST_TYPE_FOLDER_PICTURES	= 72,
        ZMEDIALIST_TYPE_FOLDER_FOLDERS	= 73,
        ZMEDIALIST_TYPE_FOLDER_UNKNOWNS	= 74,
        ZMEDIALIST_TYPE_FOLDER_ALBUMS	= 75,
        ZMEDIALIST_TYPE_FOLDER_PLAYLISTS	= 76,
        ZMEDIALIST_TYPE_FOLDER_PODCASTAUDIO	= 77,
        ZMEDIALIST_TYPE_FOLDER_PODCASTSERIES	= 78,
        ZMEDIALIST_TYPE_FOLDER_AUDIOBOOKPARTS	= 81,
        ZMEDIALIST_TYPE_FOLDER_GAMES	= 82,
        ZMEDIALIST_TYPE_FOLDER_ARTISTS	= 83,
        ZMEDIALIST_TYPE_FOLDER_PICTURECONTENTS_ON_STORAGELOCATION	= 84,
        ZMEDIALIST_TYPE_FOLDER_FOLDERS_ON_STORAGELOCATION	= 85,
        ZMEDIALIST_TYPE_ALL_VIDEOSERIES_OTHER	= 90,
        ZMEDIALIST_TYPE_ALL_VIDEOSERIES_MOVIE	= 91,
        ZMEDIALIST_TYPE_ALL_VIDEOSERIES_TVSHOW	= 92,
        ZMEDIALIST_TYPE_ALL_VIDEOSERIES_MUSICVIDEO	= 93,
        ZMEDIALIST_TYPE_ALL_VIDEOSERIES_PODCAST	= 94,
        ZMEDIALIST_TYPE_ALL_VIDEOSERIES_PERSONAL	= 95,
        ZMEDIALIST_TYPE_VIDEOSERIES_VIDEOS	= 100,
        ZMEDIALIST_TYPE_VIDEOSERIES_CONTENTS	= 101,
        ZMEDIALIST_TYPE_ALL_VIDEOS_OTHER	= 110,
        ZMEDIALIST_TYPE_ALL_VIDEOS_MOVIE	= 111,
        ZMEDIALIST_TYPE_ALL_VIDEOS_TVSHOW	= 112,
        ZMEDIALIST_TYPE_ALL_VIDEOS_MUSICVIDEO	= 113,
        ZMEDIALIST_TYPE_ALL_VIDEOS_PODCAST	= 114,
        ZMEDIALIST_TYPE_ALL_VIDEOS_PERSONAL	= 115,
        ZMEDIALIST_TYPE_ALL_VIDEOS_NONPODCASTS	= 116,
        ZMEDIALIST_TYPE_ALL_PODCASTSERIES_AUDIO	= 120,
        ZMEDIALIST_TYPE_ALL_PODCASTSERIES_VIDEO	= 121,
        ZMEDIALIST_TYPE_PODCASTSERIES_CONTENTS	= 122,
        ZMEDIALIST_TYPE_PODCASTSERIES_VIDEO	= 123,
        ZMEDIALIST_TYPE_PODCASTSERIES_AUDIOPODCASTS	= 124,
        ZMEDIALIST_TYPE_PODCASTSERIES_CONTENTS_LOCAL	= 125,
        ZMEDIALIST_TYPE_PODCASTSERIES_CONTENTS_LOCAL_AUDIO	= 126,
        ZMEDIALIST_TYPE_PODCASTSERIES_CONTENTS_LOCAL_VIDEO	= 127,
        ZMEDIALIST_TYPE_ALL_PODCASTEPISODES_BY_URL	= 128,
        ZMEDIALIST_TYPE_OTHER	= 130,
        ZMEDIALIST_TYPE_ALL_CLOUDCONTENT	= 150,
        ZMEDIALIST_TYPE_ALL_CLOUDCONTENT_AUDIO	= 151,
        ZMEDIALIST_TYPE_ALL_CLOUDCONTENT_ALBUMS	= 152,
        ZMEDIALIST_TYPE_ALL_CLOUDCONTENT_ARTISTS	= 153,
        ZMEDIALIST_TYPE_ALL_CLOUDCONTENT_PLAYLISTS	= 154,
        ZMEDIALIST_TYPE_ALL_CLOUDCONTENT_AUDIOGENRE	= 155,
        ZMEDIALIST_TYPE_ALL_USERCARDS_FRIENDS	= 160,
        ZMEDIALIST_TYPE_UNFILTERED_ALBUM_CONTENTS	= 170,
        ZMEDIALIST_TYPE_UNFILTERED_ARTIST_CONTENTS	= 171,
        ZMEDIALIST_TYPE_UNFILTERED_AUDIOGENRE_CONTENTS	= 172,
        ZMEDIALIST_TYPE_UNFILTERED_ARTIST_AUDIO	= 173,
        ZMEDIALIST_TYPE_UNFILTERED_FOLDER_CONTENTS	= 174,
        ZMEDIALIST_TYPE_ALL_AUDIOBOOKS	= 180,
        ZMEDIALIST_TYPE_ALL_AUDIOBOOKPARTS	= 181,
        ZMEDIALIST_TYPE_AUDIOBOOK_AUDIOBOOKSPARTS	= 182,
        ZMEDIALIST_TYPE_ALL_GAMES	= 190,
        ZMEDIALIST_TYPE_ALL_GAMERUNTIMES	= 191,
        ZMEDIALIST_TYPE_ALL_GAMESTORAGES	= 192,
        ZMEDIALIST_TYPE_ALL_GAMES_CREATOR	= 193,
        ZMEDIALIST_TYPE_ALL_GAMES_COMMUNITY	= 194,
        ZMEDIALIST_TYPE_ALL_GAMES_APPLICATIONS	= 195,
        ZMEDIALIST_TYPE_ALL_CLOUDTASKS	= 200,
        ZMEDIALIST_TYPE_ALL_CLOUDJOBS	= 201,
        ZMEDIALIST_TYPE_CLOUDJOB_CLOUDITEMS	= 202,
        ZMEDIALIST_TYPE_ALL_CARTITEMS	= 210,
        ZMEDIALIST_TYPE_ALL_PLAYLISTS_STATIC	= 220,
        ZMEDIALIST_TYPE_ALL_PLAYLISTS_USERCARD	= 221,
        ZMEDIALIST_TYPE_ALL_PLAYLISTS_CHANNEL	= 222,
        ZMEDIALIST_TYPE_ALL_PLAYLISTS_STATIC_NO_QUICKLIST	= 223,
        ZMEDIALIST_TYPE_ALL_PLAYLISTS_PICTURETAG	= 224,
        ZMEDIALIST_TYPE_ALL_QUICKLAUNCH	= 230,
        ZMEDIALIST_TYPE_QUICKLAUNCH_FAVORITES	= 231,
        ZMEDIALIST_TYPE_QUICKLAUNCH_RECENT	= 232,
        ZMEDIALIST_TYPE_QUICKLAUNCH_NEW	= 233,
        ZMEDIALIST_TYPE_ALL_BOOKMARKS	= 240,
        ZMEDIALIST_TYPE_ALL_LETTERS	= 250,
        ZMEDIALIST_TYPE_SPECIAL_ALLCHANNELCONTENT	= 260,
        ZMEDIALIST_TYPE_SPECIAL_ALLMUSIC	= 261,
        ZMEDIALIST_TYPE_ALL_TRANSIENTAUDIO	= 280,
        ZMEDIALIST_TYPE_ALL_TRANSIENTPICTURES	= 281,
        ZMEDIALIST_TYPE_ALL_RADIOPRESETS	= 290,
        ZMEDIALIST_TYPE_PLAYLIST_PICTURETAG	= 300,
        ZMEDIALIST_TYPE_PLAYLIST_PICTUREALBUM	= 302,
        ZMEDIALIST_TYPE_FOLDER_ROOT_PICTURE_FOLDERS	= 303,
        ZMEDIALIST_TYPE_FOLDER_PICTURECONTENTS	= 304,
        ZMEDIALIST_TYPE_FAVORITE_PICTURES	= 305,
        ZMEDIALIST_TYPE_ALL_PICTURECONTENTS	= 306,
        ZMEDIALIST_TYPE_ALL_ITEMS_BY_PERSISTENT_UNIQUEID	= 307,
        ZMEDIALIST_TYPE_FOLDER_PICTUREALBUMS	= 308,
        _ZMEDIALIST_TYPE_LIMIT	= ( ZMEDIALIST_TYPE_FOLDER_PICTUREALBUMS + 1 ) 
    } 	ZMEDIALIST_TYPE;

typedef 
enum _ZMEDIALIB_NOTIFICATIONTYPE
    {
        ZMEDIALIB_NOTIFICATIONTYPE_INVALID	= 0,
        ZMEDIALIB_NOTIFICATIONTYPE_SMARTDJSTATUSCHANGED	= ( ZMEDIALIB_NOTIFICATIONTYPE_INVALID + 1 ) ,
        ZMEDIALIB_NOTIFICATIONTYPE_COPYPROGRESS	= ( ZMEDIALIB_NOTIFICATIONTYPE_SMARTDJSTATUSCHANGED + 1 ) ,
        ZMEDIALIB_NOTIFICATIONTYPE_COPYCOMPLETE	= ( ZMEDIALIB_NOTIFICATIONTYPE_COPYPROGRESS + 1 ) ,
        _ZMEDIALIB_NOTIFICATIONTYPE_COUNT	= ( ZMEDIALIB_NOTIFICATIONTYPE_COPYCOMPLETE + 1 ) 
    } 	ZMEDIALIB_NOTIFICATIONTYPE;

typedef struct _ZMEDIALIB_NOTIFICATION_COPYPROGRESS
    {
    LONGLONG llCurrentBytes;
    LONGLONG llTotalBytes;
    } 	ZMEDIALIB_NOTIFICATION_COPYPROGRESS;

// Disable /W4 compiler warning C4201: nameless struct/union
#pragma warning(push)
#pragma warning(disable:4201)  // Disable C4201: nameless struct/union
typedef struct _ZMEDIALIB_NOTIFICATION
    {
    ZMEDIALIB_NOTIFICATIONTYPE eType;
    /* [switch_is][switch_type] */ union 
        {
        /* [case()] */ ZMEDIALIB_NOTIFICATION_COPYPROGRESS CopyProgress;
        /* [case()] */ HRESULT hr;
        } 	;
    } 	ZMEDIALIB_NOTIFICATION;

#pragma warning(pop)
typedef /* [v1_enum] */ 
enum _ZMEDIAITEM_ATTRIBUTE_TYPE
    {
        ZMEDIAITEM_ATTRIBUTE_TYPE_INVALID	= 0,
        ZMEDIAITEM_ATTRIBUTE_TYPE_INT	= 0x10000,
        ZMEDIAITEM_ATTRIBUTE_TYPE_STRING	= 0x20000,
        ZMEDIAITEM_ATTRIBUTE_TYPE_DATETIME	= 0x30000,
        ZMEDIAITEM_ATTRIBUTE_TYPE_GUID	= 0x40000,
        ZMEDIAITEM_ATTRIBUTE_TYPE_RELATION	= 0x100000,
        ZMEDAIITEM_ATTRIBUTE_TYPE_MASK	= 0xff0000
    } 	ZMEDIAITEM_ATTRIBUTE_TYPE;

typedef UINT ZMEDIAITEM_ATTRIBUTE;

typedef /* [v1_enum] */ 
enum _ZMEDIAITEM_INTATTRIBUTE
    {
        ZMEDIAITEM_INTATTRIBUTE_INVALID	= ZMEDIAITEM_ATTRIBUTE_TYPE_INT,
        ZMEDIAITEM_ATTRIBUTE_TRACKNUMBER	= ( ZMEDIAITEM_INTATTRIBUTE_INVALID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_RATING	= ( ZMEDIAITEM_ATTRIBUTE_TRACKNUMBER + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_DURATION	= ( ZMEDIAITEM_ATTRIBUTE_RATING + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_FORMATCODE	= ( ZMEDIAITEM_ATTRIBUTE_DURATION + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PLAYCOUNT	= ( ZMEDIAITEM_ATTRIBUTE_FORMATCODE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PLAYWINDOW	= ( ZMEDIAITEM_ATTRIBUTE_PLAYCOUNT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_WIDTH	= ( ZMEDIAITEM_ATTRIBUTE_PLAYWINDOW + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_HEIGHT	= ( ZMEDIAITEM_ATTRIBUTE_WIDTH + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_METAGENRE	= ( ZMEDIAITEM_ATTRIBUTE_HEIGHT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_FILESIZE	= ( ZMEDIAITEM_ATTRIBUTE_METAGENRE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_DISKNUMBER	= ( ZMEDIAITEM_ATTRIBUTE_FILESIZE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_AUDIOTYPE	= ( ZMEDIAITEM_ATTRIBUTE_DISKNUMBER + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_VIDEOTYPE	= ( ZMEDIAITEM_ATTRIBUTE_AUDIOTYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_APPID	= ( ZMEDIAITEM_ATTRIBUTE_VIDEOTYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_BOOKMARK	= ( ZMEDIAITEM_ATTRIBUTE_APPID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_FLAGS	= ( ZMEDIAITEM_ATTRIBUTE_BOOKMARK + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ISSUBSCRIBED	= ( ZMEDIAITEM_ATTRIBUTE_FLAGS + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_SORTORDER	= ( ZMEDIAITEM_ATTRIBUTE_ISSUBSCRIBED + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_EPISODENUMBER	= ( ZMEDIAITEM_ATTRIBUTE_SORTORDER + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_SEASONNUMBER	= ( ZMEDIAITEM_ATTRIBUTE_EPISODENUMBER + 1 ) ,
        _ZMEDIAITEM_ATTRIBUTE_ENCOUNTERREAD	= ( ZMEDIAITEM_ATTRIBUTE_SEASONNUMBER + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_USERCARD_PLAYLIST_TYPE	= ( _ZMEDIAITEM_ATTRIBUTE_ENCOUNTERREAD + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_USERCARDFLAGS	= ( ZMEDIAITEM_ATTRIBUTE_USERCARD_PLAYLIST_TYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_MEDIAPROPERTIES	= ( ZMEDIAITEM_ATTRIBUTE_USERCARDFLAGS + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CLOUDCONTENT_REFCOUNT	= ( ZMEDIAITEM_ATTRIBUTE_MEDIAPROPERTIES + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CS_FLAGS	= ( ZMEDIAITEM_ATTRIBUTE_CLOUDCONTENT_REFCOUNT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CS_STATE	= ( ZMEDIAITEM_ATTRIBUTE_CS_FLAGS + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CS_TYPE	= ( ZMEDIAITEM_ATTRIBUTE_CS_STATE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CS_REFCOUNT	= ( ZMEDIAITEM_ATTRIBUTE_CS_TYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CS_POSITION	= ( ZMEDIAITEM_ATTRIBUTE_CS_REFCOUNT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CS_PRIORITY	= ( ZMEDIAITEM_ATTRIBUTE_CS_POSITION + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CS_EXECUTERESULT	= ( ZMEDIAITEM_ATTRIBUTE_CS_PRIORITY + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CARTMESSAGEID	= ( ZMEDIAITEM_ATTRIBUTE_CS_EXECUTERESULT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CARTITEMTYPE	= ( ZMEDIAITEM_ATTRIBUTE_CARTMESSAGEID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PLAYLIST_TYPE	= ( ZMEDIAITEM_ATTRIBUTE_CARTITEMTYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ISEXPLICIT	= ( ZMEDIAITEM_ATTRIBUTE_PLAYLIST_TYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CHANNEL_STATUS	= ( ZMEDIAITEM_ATTRIBUTE_ISEXPLICIT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CLOUD_ERROR	= ( ZMEDIAITEM_ATTRIBUTE_CHANNEL_STATUS + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_AUTHENTICATION_REQUIRED	= ( ZMEDIAITEM_ATTRIBUTE_CLOUD_ERROR + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PERSISTEDCLOUDOBJ_PHASE1	= ( ZMEDIAITEM_ATTRIBUTE_AUTHENTICATION_REQUIRED + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PERSISTEDCLOUDOBJ_PHASE2	= ( ZMEDIAITEM_ATTRIBUTE_PERSISTEDCLOUDOBJ_PHASE1 + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CLOUD_PLAYCOUNT	= ( ZMEDIAITEM_ATTRIBUTE_PERSISTEDCLOUDOBJ_PHASE2 + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CLOUD_SKIPCOUNT	= ( ZMEDIAITEM_ATTRIBUTE_CLOUD_PLAYCOUNT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_GAME_FLAGS	= ( ZMEDIAITEM_ATTRIBUTE_CLOUD_SKIPCOUNT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_LIST	= ( ZMEDIAITEM_ATTRIBUTE_GAME_FLAGS + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEMTYPE	= ( ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_LIST + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEMORDER	= ( ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEMTYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEMDATA	= ( ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEMORDER + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_INBOXMSG_MSGID	= ( ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEMDATA + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_INBOXMSG_TYPE	= ( ZMEDIAITEM_ATTRIBUTE_INBOXMSG_MSGID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CLIPTYPE	= ( ZMEDIAITEM_ATTRIBUTE_INBOXMSG_TYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CS_PERSISTHANDLEVALUE	= ( ZMEDIAITEM_ATTRIBUTE_CLIPTYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CLOUD_PLAYTIME	= ( ZMEDIAITEM_ATTRIBUTE_CS_PERSISTHANDLEVALUE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ARTISTVIEW_FILLERFILE_PRESENT	= ( ZMEDIAITEM_ATTRIBUTE_CLOUD_PLAYTIME + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_LICENSE_STATE	= ( ZMEDIAITEM_ATTRIBUTE_ARTISTVIEW_FILLERFILE_PRESENT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_EXPERIMENT_ID	= ( ZMEDIAITEM_ATTRIBUTE_LICENSE_STATE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_MAX_LOCAL_SERIES_ITEMS	= ( ZMEDIAITEM_ATTRIBUTE_EXPERIMENT_ID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_SERIES_REFRESH_INTERVAL	= ( ZMEDIAITEM_ATTRIBUTE_MAX_LOCAL_SERIES_ITEMS + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_DOWNLOAD_STATE	= ( ZMEDIAITEM_ATTRIBUTE_SERIES_REFRESH_INTERVAL + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_DOWNLOAD_TYPE	= ( ZMEDIAITEM_ATTRIBUTE_DOWNLOAD_STATE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PODCAST_TYPE	= ( ZMEDIAITEM_ATTRIBUTE_DOWNLOAD_TYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_SUBSCRIPTION_STATE	= ( ZMEDIAITEM_ATTRIBUTE_PODCAST_TYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ITEM_ACQUIRED_TYPE	= ( ZMEDIAITEM_ATTRIBUTE_SUBSCRIPTION_STATE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PODCAST_DOWNLOAD_PROGRESS	= ( ZMEDIAITEM_ATTRIBUTE_ITEM_ACQUIRED_TYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ITEM_LATITUDE	= ( ZMEDIAITEM_ATTRIBUTE_PODCAST_DOWNLOAD_PROGRESS + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ITEM_LONGITUDE	= ( ZMEDIAITEM_ATTRIBUTE_ITEM_LATITUDE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PLAYLIST_PICTUREALBUM	= ( ZMEDIAITEM_ATTRIBUTE_ITEM_LONGITUDE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_FM_FREQUENCY	= ( ZMEDIAITEM_ATTRIBUTE_PLAYLIST_PICTUREALBUM + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_RADIO_REGION	= ( ZMEDIAITEM_ATTRIBUTE_FM_FREQUENCY + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_TRANSIENTITEM_ACTUALTYPE	= ( ZMEDIAITEM_ATTRIBUTE_RADIO_REGION + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_SRCPATHHASH_FORMEDIAGROVELER	= ( ZMEDIAITEM_ATTRIBUTE_TRANSIENTITEM_ACTUALTYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ITEM_HEADING	= ( ZMEDIAITEM_ATTRIBUTE_SRCPATHHASH_FORMEDIAGROVELER + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ITEM_ALTITUDE	= ( ZMEDIAITEM_ATTRIBUTE_ITEM_HEADING + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ITEM_ORIENTATION	= ( ZMEDIAITEM_ATTRIBUTE_ITEM_ALTITUDE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PICTURE_RATING	= ( ZMEDIAITEM_ATTRIBUTE_ITEM_ORIENTATION + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CARTENTRY_NUM_ATTEMPTS	= ( ZMEDIAITEM_ATTRIBUTE_PICTURE_RATING + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CARTENTRY_LAST_ERROR	= ( ZMEDIAITEM_ATTRIBUTE_CARTENTRY_NUM_ATTEMPTS + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CARTENTRY_DOWNLOAD_PROGRESS	= ( ZMEDIAITEM_ATTRIBUTE_CARTENTRY_LAST_ERROR + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ITEM_LASTERROR	= ( ZMEDIAITEM_ATTRIBUTE_CARTENTRY_DOWNLOAD_PROGRESS + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_DORADO_PLAYLIST_TYPE	= ( ZMEDIAITEM_ATTRIBUTE_ITEM_LASTERROR + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_DORADO_PLAYLIST_EXTENDED_TYPE	= ( ZMEDIAITEM_ATTRIBUTE_DORADO_PLAYLIST_TYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_DORADO_PLAYLIST_COMPLETE	= ( ZMEDIAITEM_ATTRIBUTE_DORADO_PLAYLIST_EXTENDED_TYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEM_CONTEXT	= ( ZMEDIAITEM_ATTRIBUTE_DORADO_PLAYLIST_COMPLETE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_TRANSIENTITEM_STREAMSTATUS	= ( ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEM_CONTEXT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PROHIBIT_LOW_POWER_MODE	= ( ZMEDIAITEM_ATTRIBUTE_TRANSIENTITEM_STREAMSTATUS + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_MEDIACONTROLS	= ( ZMEDIAITEM_ATTRIBUTE_PROHIBIT_LOW_POWER_MODE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_SMARTDJ_SCHEMEID	= ( ZMEDIAITEM_ATTRIBUTE_MEDIACONTROLS + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEMZMEDIATYPE	= ( ZMEDIAITEM_ATTRIBUTE_SMARTDJ_SCHEMEID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PODCAST_DOWNLOAD_FAIL_COUNT	= ( ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEMZMEDIATYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_TRANSIENTITEM_ISSTREAMING	= ( ZMEDIAITEM_ATTRIBUTE_PODCAST_DOWNLOAD_FAIL_COUNT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_VECTOR_DOWNLOAD_STATE	= ( ZMEDIAITEM_ATTRIBUTE_TRANSIENTITEM_ISSTREAMING + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PROCESS_ID	= ( ZMEDIAITEM_ATTRIBUTE_VECTOR_DOWNLOAD_STATE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_COVERIMAGE	= ( ZMEDIAITEM_ATTRIBUTE_PROCESS_ID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_COVERIMAGE_SELECT_LAST_ITEM	= ( ZMEDIAITEM_ATTRIBUTE_COVERIMAGE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_COVERIMAGE_NOT_PRESENT	= ( ZMEDIAITEM_ATTRIBUTE_COVERIMAGE_SELECT_LAST_ITEM + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_STORAGELOCATION	= ( ZMEDIAITEM_ATTRIBUTE_COVERIMAGE_NOT_PRESENT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_BYTESTREAM	= ( ZMEDIAITEM_ATTRIBUTE_STORAGELOCATION + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PROPERTYSTORE	= ( ZMEDIAITEM_ATTRIBUTE_BYTESTREAM + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_LICENSE_FAIL_COUNT	= ( ZMEDIAITEM_ATTRIBUTE_PROPERTYSTORE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_OTA_MDLC_FAIL_COUNT	= ( ZMEDIAITEM_ATTRIBUTE_LICENSE_FAIL_COUNT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PICTURE_RATING_PERCENT	= ( ZMEDIAITEM_ATTRIBUTE_OTA_MDLC_FAIL_COUNT + 1 ) ,
        _ZMEDIAITEM_INTATTRIBUTE_LIMIT	= ( ZMEDIAITEM_ATTRIBUTE_PICTURE_RATING_PERCENT + 1 ) 
    } 	ZMEDIAITEM_INTATTRIBUTE;

typedef /* [v1_enum] */ 
enum _ZMEDIAITEM_GUIDATTRIBUTE
    {
        ZMEDIAITEM_GUIDATTRIBUTE_INVALID	= ZMEDIAITEM_ATTRIBUTE_TYPE_GUID,
        ZMEDIAITEM_ATTRIBUTE_MEDIAID	= ( ZMEDIAITEM_GUIDATTRIBUTE_INVALID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_VIRTUALAPPID	= ( ZMEDIAITEM_ATTRIBUTE_MEDIAID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PARENT_MEDIAID	= ( ZMEDIAITEM_ATTRIBUTE_VIRTUALAPPID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ALBUM_MEDIAID	= ( ZMEDIAITEM_ATTRIBUTE_PARENT_MEDIAID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PERSISTENT_UNIQUEID	= ( ZMEDIAITEM_ATTRIBUTE_ALBUM_MEDIAID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PRODUCTID	= ( ZMEDIAITEM_ATTRIBUTE_PERSISTENT_UNIQUEID + 1 ) ,
        _ZMEDIAITEM_GUIDATTRIBUTE_LIMIT	= ( ZMEDIAITEM_ATTRIBUTE_PRODUCTID + 1 ) 
    } 	ZMEDIAITEM_GUIDATTRIBUTE;

typedef /* [v1_enum] */ 
enum _ZMEDIAITEM_STRINGATTRIBUTE
    {
        ZMEDIAITEM_STRINGATTRIBUTE_INVALID	= ZMEDIAITEM_ATTRIBUTE_TYPE_STRING,
        ZMEDIAITEM_ATTRIBUTE_NAME	= ( ZMEDIAITEM_STRINGATTRIBUTE_INVALID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ARTIST	= ( ZMEDIAITEM_ATTRIBUTE_NAME + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ALBUM	= ( ZMEDIAITEM_ATTRIBUTE_ARTIST + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_GENRE	= ( ZMEDIAITEM_ATTRIBUTE_ALBUM + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PARENTALRATING	= ( ZMEDIAITEM_ATTRIBUTE_GENRE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_DESCRIPTION	= ( ZMEDIAITEM_ATTRIBUTE_PARENTALRATING + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_GUIDETEXT	= ( ZMEDIAITEM_ATTRIBUTE_DESCRIPTION + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_VIDEOSERIES	= ( ZMEDIAITEM_ATTRIBUTE_GUIDETEXT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_PODCASTSERIES	= ( ZMEDIAITEM_ATTRIBUTE_VIDEOSERIES + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_FILEPATH	= ( ZMEDIAITEM_ATTRIBUTE_PODCASTSERIES + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ARTPATH	= ( ZMEDIAITEM_ATTRIBUTE_FILEPATH + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_FILENAME	= ( ZMEDIAITEM_ATTRIBUTE_ARTPATH + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_URL	= ( ZMEDIAITEM_ATTRIBUTE_FILENAME + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_SOURCE	= ( ZMEDIAITEM_ATTRIBUTE_URL + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_USERSTATUS	= ( ZMEDIAITEM_ATTRIBUTE_SOURCE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ZUNETAG	= ( ZMEDIAITEM_ATTRIBUTE_USERSTATUS + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_USERGUID	= ( ZMEDIAITEM_ATTRIBUTE_ZUNETAG + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_BACKGROUND_PATH	= ( ZMEDIAITEM_ATTRIBUTE_USERGUID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_USERFRIENDLYNAME	= ( ZMEDIAITEM_ATTRIBUTE_BACKGROUND_PATH + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ARTURL	= ( ZMEDIAITEM_ATTRIBUTE_USERFRIENDLYNAME + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_INBOXMSG_CONTENT	= ( ZMEDIAITEM_ATTRIBUTE_ARTURL + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_VERSION	= ( ZMEDIAITEM_ATTRIBUTE_INBOXMSG_CONTENT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_KID	= ( ZMEDIAITEM_ATTRIBUTE_VERSION + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_COPYRIGHT	= ( ZMEDIAITEM_ATTRIBUTE_KID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_REQUIREDFIRMWARE	= ( ZMEDIAITEM_ATTRIBUTE_COPYRIGHT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_NAME_RAW	= ( ZMEDIAITEM_ATTRIBUTE_REQUIREDFIRMWARE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CARTENTRY_OFFER_ID	= ( ZMEDIAITEM_ATTRIBUTE_NAME_RAW + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CARTENTRY_ITEM_NAME	= ( ZMEDIAITEM_ATTRIBUTE_CARTENTRY_OFFER_ID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_ARTPATH_SMALL	= ( ZMEDIAITEM_ATTRIBUTE_CARTENTRY_ITEM_NAME + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEM_TEXT	= ( ZMEDIAITEM_ATTRIBUTE_ARTPATH_SMALL + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEM_DISPLAYART	= ( ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEM_TEXT + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_TRANSIENT_CLIENT_SID	= ( ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEM_DISPLAYART + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_YOMI_NAME	= ( ZMEDIAITEM_ATTRIBUTE_TRANSIENT_CLIENT_SID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEM_MARKETPLACEID	= ( ZMEDIAITEM_ATTRIBUTE_YOMI_NAME + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEM_MARKETPLACESERIESID	= ( ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEM_MARKETPLACEID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_FOLDER_COVER_FILEPATH	= ( ZMEDIAITEM_ATTRIBUTE_QUICKLAUNCH_ITEM_MARKETPLACESERIESID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_APP_DSTOKENID	= ( ZMEDIAITEM_ATTRIBUTE_FOLDER_COVER_FILEPATH + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CLOUDSYNC_DOWNLOAD_INSTANCE_ID	= ( ZMEDIAITEM_ATTRIBUTE_APP_DSTOKENID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CLOUDSYNC_DOWNLOAD_LICENSE_TYPE	= ( ZMEDIAITEM_ATTRIBUTE_CLOUDSYNC_DOWNLOAD_INSTANCE_ID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CLOUDSYNC_DOWNLOAD_ENCODING_TYPE	= ( ZMEDIAITEM_ATTRIBUTE_CLOUDSYNC_DOWNLOAD_LICENSE_TYPE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_CLOUDSYNC_STREAMING_INSTANCE_ID	= ( ZMEDIAITEM_ATTRIBUTE_CLOUDSYNC_DOWNLOAD_ENCODING_TYPE + 1 ) ,
        _ZMEDIAITEM_STRINGATTRIBUTE_LIMIT	= ( ZMEDIAITEM_ATTRIBUTE_CLOUDSYNC_STREAMING_INSTANCE_ID + 1 ) 
    } 	ZMEDIAITEM_STRINGATTRIBUTE;

typedef /* [v1_enum] */ 
enum _ZMEDIAITEM_DATETIMEATTRIBUTE
    {
        ZMEDIAITEM_DATETIMEATTRIBUTE_INVALID	= ZMEDIAITEM_ATTRIBUTE_TYPE_DATETIME,
        ZMEDIAITEM_ATTRIBUTE_DATE	= ( ZMEDIAITEM_DATETIMEATTRIBUTE_INVALID + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_FEEDLASTUPDATED	= ( ZMEDIAITEM_ATTRIBUTE_DATE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_LASTPLAYEDTIME	= ( ZMEDIAITEM_ATTRIBUTE_FEEDLASTUPDATED + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_LICENSEEXPIREDATE	= ( ZMEDIAITEM_ATTRIBUTE_LASTPLAYEDTIME + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_LAST_MODIFIED	= ( ZMEDIAITEM_ATTRIBUTE_LICENSEEXPIREDATE + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_FAVORITE_DATE	= ( ZMEDIAITEM_ATTRIBUTE_LAST_MODIFIED + 1 ) ,
        ZMEDIAITEM_ATTRIBUTE_SMARTDJ_NEXT_RETRY_DATE	= ( ZMEDIAITEM_ATTRIBUTE_FAVORITE_DATE + 1 ) ,
        _ZMEDIAITEM_DATETIMEATTRIBUTE_LIMIT	= ( ZMEDIAITEM_ATTRIBUTE_SMARTDJ_NEXT_RETRY_DATE + 1 ) 
    } 	ZMEDIAITEM_DATETIMEATTRIBUTE;

typedef struct _ZMEDIAITEM_ATTRIBUTEDESC
    {
    ZMEDIAITEM_ATTRIBUTE attrib;
    void *pvVal;
    size_t cbVal;
    HRESULT hr;
    } 	ZMEDIAITEM_ATTRIBUTEDESC;

typedef /* [v1_enum] */ 
enum _ZMEDIAITEM_RELATION
    {
        ZMEDIAITEM_RELATION_INVALID	= ZMEDIAITEM_ATTRIBUTE_TYPE_RELATION,
        ZMEDIAITEM_RELATION_ARTIST	= ( ZMEDIAITEM_RELATION_INVALID + 1 ) ,
        ZMEDIAITEM_RELATION_ALBUM	= ( ZMEDIAITEM_RELATION_ARTIST + 1 ) ,
        ZMEDIAITEM_RELATION_GENRE	= ( ZMEDIAITEM_RELATION_ALBUM + 1 ) ,
        ZMEDIAITEM_RELATION_DATERANGE	= ( ZMEDIAITEM_RELATION_GENRE + 1 ) ,
        ZMEDIAITEM_RELATION_PICTUREALBUM	= ( ZMEDIAITEM_RELATION_DATERANGE + 1 ) ,
        ZMEDIAITEM_RELATION_VIDEOSERIES	= ( ZMEDIAITEM_RELATION_PICTUREALBUM + 1 ) ,
        ZMEDIAITEM_RELATION_PODCASTSERIES	= ( ZMEDIAITEM_RELATION_VIDEOSERIES + 1 ) ,
        ZMEDIAITEM_RELATION_USERCARD	= ( ZMEDIAITEM_RELATION_PODCASTSERIES + 1 ) ,
        ZMEDIAITEM_RELATION_FOLDER	= ( ZMEDIAITEM_RELATION_USERCARD + 1 ) ,
        _ZMEDIAITEM_RELATION_UNUSED	= ( ZMEDIAITEM_RELATION_FOLDER + 1 ) ,
        ZMEDIAITEM_RELATION_AUDIOBOOK	= ( _ZMEDIAITEM_RELATION_UNUSED + 1 ) ,
        ZMEDIAITEM_RELATION_CLOUDJOB	= ( ZMEDIAITEM_RELATION_AUDIOBOOK + 1 ) ,
        ZMEDIAITEM_RELATION_INBOXMSG_MEDIAITEM	= ( ZMEDIAITEM_RELATION_CLOUDJOB + 1 ) ,
        _ZMEDIAITEM_RELATION_LIMIT	= ( ZMEDIAITEM_RELATION_INBOXMSG_MEDIAITEM + 1 ) 
    } 	ZMEDIAITEM_RELATION;

typedef 
enum _ZMEDIAFOLDER_TYPE
    {
        ZMEDIAFOLDER_TYPE_UNKNOWN	= -1,
        ZMEDIAFOLDER_TYPE_ROOT	= 0,
        ZMEDIAFOLDER_TYPE_PICTURES_ROOT	= 1,
        ZMEDIAFOLDER_TYPE_FAVORITES	= 2,
        ZMEDIAFOLDER_TYPE_CAMERA_ROLL	= 3,
        ZMEDIAFOLDER_TYPE_RECEIVED_PICTURES	= 4,
        ZMEDIAFOLDER_TYPE_SAMPLE_PICTURES	= 5,
        ZMEDIAFOLDER_TYPE_INVALID	= 6,
        ZMEDIAFOLDER_TYPE_COUNT	= 7
    } 	ZMEDIAFOLDER_TYPE;

typedef 
enum _ZMEDIAITEM_THUMBTYPE
    {
        ZMEDIAITEM_THUMBTYPE_INVALID	= -1,
        ZMEDIAITEM_THUMBTYPE_NORMAL	= 0,
        ZMEDIAITEM_THUMBTYPE_TINY	= 1
    } 	ZMEDIAITEM_THUMBTYPE;

typedef 
enum _ZMEDIASPECIALITEM
    {
        ZMEDIASPECIALITEM_INVALID	= 0,
        ZMEDIASPECIALITEM_PLAYLIST_QUICKLIST	= ( ZMEDIASPECIALITEM_INVALID + 1 ) ,
        ZMEDIASPECIALITEM_ALBUM_UNKNOWN	= ( ZMEDIASPECIALITEM_PLAYLIST_QUICKLIST + 1 ) ,
        ZMEDIASPECIALITEM_ARTIST_UNKNOWN	= ( ZMEDIASPECIALITEM_ALBUM_UNKNOWN + 1 ) ,
        ZMEDIASPECIALITEM_AUDIOGENRE_UNKNOWN	= ( ZMEDIASPECIALITEM_ARTIST_UNKNOWN + 1 ) ,
        ZMEDIASPECIALITEM_DATERANGE_UNKNOWN	= ( ZMEDIASPECIALITEM_AUDIOGENRE_UNKNOWN + 1 ) ,
        ZMEDIASPECIALITEM_RADIOPRESETLIST	= ( ZMEDIASPECIALITEM_DATERANGE_UNKNOWN + 1 ) ,
        _ZMEDIASPECIALITEM_COUNT	= ( ZMEDIASPECIALITEM_RADIOPRESETLIST + 1 ) 
    } 	ZMEDIASPECIALITEM;

typedef 
enum _ZMEDIAITEM_VISIBILITY
    {
        ZMEDIAITEM_VISIBILITY_INVALID	= -1,
        ZMEDIAITEM_VISIBILITY_LIBRARY	= 0,
        ZMEDIAITEM_VISIBILITY_HIDDEN	= 1,
        ZMEDIAITEM_VISIBILITY_CLOUD	= 2
    } 	ZMEDIAITEM_VISIBILITY;

typedef 
enum _ZMEDIALIB_WRITELOCK_TYPE
    {
        ZMEDIALIB_WRITELOCK_TYPE_MAJOR_CHANGE	= 0,
        ZMEDIALIB_WRITELOCK_TYPE_MINOR_CHANGE	= ( ZMEDIALIB_WRITELOCK_TYPE_MAJOR_CHANGE + 1 ) 
    } 	ZMEDIALIB_WRITELOCK_TYPE;

typedef 
enum _ZMEDIAITEM_QUICKLAUNCH_LIST
    {
        ZMEDIAITEM_QUICKLAUNCH_LIST_INVALID	= 0,
        ZMEDIAITEM_QUICKLAUNCH_LIST_FAVORITES	= 1,
        ZMEDIAITEM_QUICKLAUNCH_LIST_NEW	= 2,
        ZMEDIAITEM_QUICKLAUNCH_LIST_RECENT	= 3
    } 	ZMEDIAITEM_QUICKLAUNCH_LIST;

typedef 
enum _ZMEDIALIB_DISPOSITION
    {
        ZMEDIALIB_DISPOSITION_OPENEXISTING	= 0,
        ZMEDIALIB_DISPOSITION_OPENALWAYS	= ( ZMEDIALIB_DISPOSITION_OPENEXISTING + 1 ) 
    } 	ZMEDIALIB_DISPOSITION;

typedef 
enum _ZMEDIAITEM_RATING
    {
        ZMEDIAITEM_RATING_UNRATED	= 0,
        ZMEDIAITEM_RATING_DISLIKE_MOST	= 1,
        ZMEDIAITEM_RATING_DISLIKE_MORE	= 2,
        ZMEDIAITEM_RATING_DISLIKE	= 3,
        ZMEDIAITEM_RATING_DISLIKE_SOMEWHAT	= 4,
        ZMEDIAITEM_RATING_DISLIKE_NEUTRAL	= 5,
        ZMEDIAITEM_RATING_LIKE_NEUTRAL	= 6,
        ZMEDIAITEM_RATING_LIKE_SOMEWHAT	= 7,
        ZMEDIAITEM_RATING_LIKE	= 8,
        ZMEDIAITEM_RATING_LIKE_MORE	= 9,
        ZMEDIAITEM_RATING_LIKE_MOST	= 10,
        _ZMEDIAITEM_RATING_COUNT	= ( ZMEDIAITEM_RATING_LIKE_MOST + 1 ) ,
        ZMEDIAITEM_RATING_HATEIT	= 2,
        ZMEDIAITEM_RATING_LOVEIT	= 8,
        _ZMEDIAITEM_RATING_POSITIVE	= ZMEDIAITEM_RATING_LIKE_NEUTRAL
    } 	ZMEDIAITEM_RATING;

typedef 
enum _ZMEDIAITEM_SORTORDER
    {
        ZMEDIAITEM_SORTORDER_NONE	= 0,
        ZMEDIAITEM_SORTORDER_NEWEST_FIRST	= 1,
        ZMEDIAITEM_SORTORDER_OLDEST_FIRST	= 2
    } 	ZMEDIAITEM_SORTORDER;


enum ESubscriptionObjectDownloadState
    {
        eDownloadStateNone	= 0,
        eDownloadStateError	= 1,
        eDownloadStateDownloading	= 2,
        eDownloadStateDownloaded	= 3,
        eDownloadStatePending	= 4
    } ;

enum SUBSCRIPTION_STATE
    {
        SUBSCRIPTION_UNSUBSCRIBED	= 0,
        SUBSCRIPTION_SUBSCRIBED	= 1,
        SUBSCRIPTION_UNSUBSCRIBE_PENDING_DELETE	= 2,
        SUBSCRIPTION_UNSUBSCRIBE_PENDING_NODELETE	= 3
    } ;
typedef 
enum _ZMEDIAITEM_FLAG
    {
        ZMEDIAITEM_FLAG_DRMPROTECTED	= 0x1,
        ZMEDIAITEM_FLAG_CONSUMED	= 0x2,
        ZMEDIAITEM_FLAG_ADD_TO_WISHLIST	= 0x4,
        ZMEDIAITEM_FLAG_PREVENT_COPYTOHOST	= 0x8,
        ZMEDIAITEM_FLAG_PREVENT_SEND	= 0x10,
        ZMEDIAITEM_FLAG_RECEIVED_VIASEND	= 0x20,
        ZMEDIAITEM_FLAG_PURCHASE_REQUESTED	= 0x40
    } 	ZMEDIAITEM_FLAG;

typedef 
enum _ZMEDIAITEM_VIDEOTYPE
    {
        ZMEDIAITEM_VIDEOTYPE_INVALID	= 0,
        ZMEDIAITEM_VIDEOTYPE_OTHER	= ( ZMEDIAITEM_VIDEOTYPE_INVALID + 1 ) ,
        ZMEDIAITEM_VIDEOTYPE_MOVIE	= ( ZMEDIAITEM_VIDEOTYPE_OTHER + 1 ) ,
        ZMEDIAITEM_VIDEOTYPE_PODCAST	= ( ZMEDIAITEM_VIDEOTYPE_MOVIE + 1 ) ,
        ZMEDIAITEM_VIDEOTYPE_TVSHOW	= ( ZMEDIAITEM_VIDEOTYPE_PODCAST + 1 ) ,
        ZMEDIAITEM_VIDEOTYPE_MUSICVIDEO	= ( ZMEDIAITEM_VIDEOTYPE_TVSHOW + 1 ) ,
        ZMEDIAITEM_VIDEOTYPE_PERSONAL	= ( ZMEDIAITEM_VIDEOTYPE_MUSICVIDEO + 1 ) ,
        _ZMEDIAITEM_VIDEOTYPE_COUNT	= ( ZMEDIAITEM_VIDEOTYPE_PERSONAL + 1 ) 
    } 	ZMEDIAITEM_VIDEOTYPE;

typedef 
enum _ZMEDIAITEM_PODCASTTYPE
    {
        ZMEDIAITEM_PODCASTTYPE_INVALID	= 0,
        ZMEDIAITEM_PODCASTTYPE_AUDIO	= 1,
        ZMEDIAITEM_PODCASTTYPE_VIDEO	= 2,
        ZMEDIAITEM_PODCASTTYPE_MIXED	= 3
    } 	ZMEDIAITEM_PODCASTTYPE;

typedef 
enum _QUICKLAUNCH_ITEM_CONTEXT_TYPE
    {
        QUICKLAUNCH_ITEM_CONTEXT_TYPE_UNKNOWN	= 0,
        QUICKLAUNCH_ITEM_CONTEXT_TYPE_AUDIO_CONTAINER	= 1,
        QUICKLAUNCH_ITEM_CONTEXT_TYPE_VIDEO_CONTAINER	= 2
    } 	QUICKLAUNCH_ITEM_CONTEXT_TYPE;

typedef 
enum _ZMEDIAITEM_AUDIOTYPE
    {
        ZMEDIAITEM_AUDIOTYPE_INVALID	= 0,
        ZMEDIAITEM_AUDIOTYPE_MUSIC	= ( ZMEDIAITEM_AUDIOTYPE_INVALID + 1 ) ,
        ZMEDIAITEM_AUDIOTYPE_PODCAST	= ( ZMEDIAITEM_AUDIOTYPE_MUSIC + 1 ) ,
        ZMEDIAITEM_AUDIOTYPE_AUDIOBOOK	= ( ZMEDIAITEM_AUDIOTYPE_PODCAST + 1 ) ,
        _ZMEDIAITEM_AUDIOTYPE_COUNT	= ( ZMEDIAITEM_AUDIOTYPE_AUDIOBOOK + 1 ) 
    } 	ZMEDIAITEM_AUDIOTYPE;

typedef 
enum _ZMEDIAITEM_INBOXMSG_TYPE
    {
        ZMEDIAITEM_INBOXMSGTYPE_INVALID	= 0,
        ZMEDIAITEM_INBOXMSGTYPE_TEXT	= ( ZMEDIAITEM_INBOXMSGTYPE_INVALID + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_TRACK	= ( ZMEDIAITEM_INBOXMSGTYPE_TEXT + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_FRIENDREQUEST	= ( ZMEDIAITEM_INBOXMSGTYPE_TRACK + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_ALBUM	= ( ZMEDIAITEM_INBOXMSGTYPE_FRIENDREQUEST + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_PLAYLIST	= ( ZMEDIAITEM_INBOXMSGTYPE_ALBUM + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_PODCAST	= ( ZMEDIAITEM_INBOXMSGTYPE_PLAYLIST + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_PHOTO	= ( ZMEDIAITEM_INBOXMSGTYPE_PODCAST + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_USERCARD	= ( ZMEDIAITEM_INBOXMSGTYPE_PHOTO + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_FORUMMSG	= ( ZMEDIAITEM_INBOXMSGTYPE_USERCARD + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_VIDEO	= ( ZMEDIAITEM_INBOXMSGTYPE_FORUMMSG + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_GAME	= ( ZMEDIAITEM_INBOXMSGTYPE_VIDEO + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_NOTIFICATION	= ( ZMEDIAITEM_INBOXMSGTYPE_GAME + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_MARKETPLACE_PLAYLIST	= ( ZMEDIAITEM_INBOXMSGTYPE_NOTIFICATION + 1 ) ,
        ZMEDIAITEM_INBOXMSGTYPE_UNKNOWN	= ( ZMEDIAITEM_INBOXMSGTYPE_MARKETPLACE_PLAYLIST + 1 ) ,
        _ZMEDIAITEM_INBOXMSGTYPE_COUNT	= ( ZMEDIAITEM_INBOXMSGTYPE_UNKNOWN + 1 ) 
    } 	ZMEDIAITEM_INBOXMSG_TYPE;

typedef 
enum _ZMEDIAITEM_QUICKLAUNCH_ITEMTYPE
    {
        ZMEDIAITEM_QUICKLAUNCH_ITEMTYPE_INVALID	= 0,
        ZMEDIAITEM_QUICKLAUNCH_ITEMTYPE_ZMEDIAITEM	= 1,
        ZMEDIAITEM_QUICKLAUNCH_ITEMTYPE_RADIO	= 2,
        ZMEDIAITEM_QUICKLAUNCH_ITEMTYPE_WEBSITE	= 3,
        ZMEDIAITEM_QUICKLAUNCH_ITEMTYPE_THIRD_PARTY	= 4,
        ZMEDIAITEM_QUICKLAUNCH_ITEMTYPE_MARKETPLACE_CONTAINER	= 5,
        ZMEDIAITEM_QUICKLAUNCH_ITEMTYPE_SMARTDJMIX_LOCAL	= 6,
        ZMEDIAITEM_QUICKLAUNCH_ITEMTYPE_SMARTDJMIX_MARKETPLACE	= 7,
        ZMEDIAITEM_QUICKLAUNCH_ITEMTYPE_MARKETPLACE_PODCAST_EPISODE	= 8
    } 	ZMEDIAITEM_QUICKLAUNCH_ITEMTYPE;

typedef 
enum _ZMEDIAITEM_MEDIACONTROLS_FLAGS
    {
        ZMEDIAITEM_MEDIACONTROLS_CANSKIPNEXT	= 0x1,
        ZMEDIAITEM_MEDIACONTROLS_CANSKIPPREVIOUS	= 0x2,
        ZMEDIAITEM_MEDIACONTROLS_CANFASTFORWARD	= 0x4,
        ZMEDIAITEM_MEDIACONTROLS_CANREWIND	= 0x8,
        ZMEDIAITEM_MEDIACONTROLS_CANPAUSE	= 0x10,
        _ZMEDIAITEM_MEDIACONTROLS_ALL	= 0x1f
    } 	ZMEDIAITEM_MEDIACONTROLS_FLAGS;

typedef 
enum _ZMEDIAITEM_VECTOR_DOWNLOAD_STATE
    {
        ZMEDIAITEM_VECTOR_DOWNLOAD_STATE_INVALID_OR_PENDING	= 0,
        ZMEDIAITEM_VECTOR_DOWNLOAD_STATE_ATTEMPTED	= ( ZMEDIAITEM_VECTOR_DOWNLOAD_STATE_INVALID_OR_PENDING + 1 ) 
    } 	ZMEDIAITEM_VECTOR_DOWNLOAD_STATE;

#define ZMEDIAITEM_MAKE_SPECIALITEM(type, value) (ZMEDIAITEM)(DWORD_PTR)(((type) << 24) | ((value) & 0xffffff))
#define	ZMEDIAITEM_ROOTFOLDER	( ( ZMEDIAITEM  )( DWORD_PTR  )(( ( ZMEDIAITEM_TYPE_FOLDER << 24 )  | ( 0xffffffff & 0xffffff )  ) ) )

#define	ZMEDIAITEM_ROOTPICTUREALBUM	( ( ZMEDIAITEM  )( DWORD_PTR  )(( ( ZMEDIAITEM_TYPE_PICTUREALBUM << 24 )  | ( 0xffffffff & 0xffffff )  ) ) )

#define	ZMEDIAITEM_FMRADIO	( ( ZMEDIAITEM  )( DWORD_PTR  )(( ( ZMEDIAITEM_TYPE_UNKNOWN << 24 )  | ( 0xffffffff & 0xffffff )  ) ) )

#define	ZMEDIAITEM_LETTER_PERIOD	( ( ZMEDIAITEM  )( DWORD_PTR  )(( ( ZMEDIAITEM_TYPE_LETTER << 24 )  | ( 0xfffffffe & 0xffffff )  ) ) )

#define	ZMEDIAITEM_LETTER_MISCELLANEOUS	( ( ZMEDIAITEM  )( DWORD_PTR  )(( ( ZMEDIAITEM_TYPE_LETTER << 24 )  | ( 0xffffffff & 0xffffff )  ) ) )

typedef 
enum _ZMEDIAITEM_USERCARDFLAG
    {
        ZMEDIAITEM_USERCARDFLAG_BLOCKED	= 0x1,
        ZMEDIAITEM_USERCARDFLAG_FRIEND	= 0x2,
        ZMEDIAITEM_USERCARDFLAG_ME	= 0x10,
        ZMEDIAITEM_USERCARDFLAG_FRIEND_REQUEST	= 0x20
    } 	ZMEDIAITEM_USERCARDFLAG;

typedef 
enum _ZMEDIAITEM_INBOXMSGFLAG
    {
        ZMEDIAITEM_INBOXMSGFLAG_HASBEENREAD	= 0x1,
        ZMEDIAITEM_INBOXMSGFLAG_DELETEPOSTED	= 0x2,
        ZMEDIAITEM_INBOXMSGFLAG_MARKEDFORDELETE	= 0x4,
        ZMEDIAITEM_INBOXMSGFLAG_COMPLETE	= 0x8,
        ZMEDIAITEM_INBOXMSGFLAG_MARKEDREAD	= 0x10
    } 	ZMEDIAITEM_INBOXMSGFLAG;

typedef 
enum _ZMEDIAITEM_CARTFLAG
    {
        ZMEDIAITEM_CARTFLAG_PARTIAL_ALBUMDOWNLOAD	= 0x1,
        ZMEDIAITEM_CARTFLAG_NEEDS_UPDATE	= 0x2
    } 	ZMEDIAITEM_CARTFLAG;

typedef 
enum _ZMEDIAITEM_USERCARDPLAYLIST_TYPE
    {
        ZMEDIAITEM_USERCARD_PLAYLIST_TYPE_NORMAL	= 0,
        ZMEDIAITEM_USERCARD_PLAYLIST_TYPE_FAVORITE	= 1,
        ZMEDIAITEM_USERCARD_PLAYLIST_TYPE_RECENT	= 2,
        ZMEDIAITEM_USERCARD_PLAYLIST_TYPE_TOPARTISTS	= 3
    } 	ZMEDIAITEM_USERCARD_PLAYLIST_TYPE;

typedef 
enum _ZMEDIAITEM_PLAYLIST_TYPE
    {
        ZMEDIAITEM_PLAYLIST_TYPE_INVALID	= -1,
        ZMEDIAITEM_PLAYLIST_TYPE_STATIC	= 0,
        ZMEDIAITEM_PLAYLIST_TYPE_USERCARD	= 1,
        ZMEDIAITEM_PLAYLIST_TYPE_CHANNEL	= 2,
        ZMEDIAITEM_PLAYLIST_TYPE_INBOX	= 3,
        ZMEDIAITEM_PLAYLIST_TYPE_PICTURETAG	= 4,
        ZMEDIAITEM_PLAYLIST_TYPE_PICTUREALBUM	= 5
    } 	ZMEDIAITEM_PLAYLIST_TYPE;

struct ZPlaylistEntry
    {
    ZMEDIAITEM zmi;
    GUID guidItemId;
    } ;
typedef 
enum _ZMEDIAITEM_CHANNEL_STATUS
    {
        ZMEDIAITEM_CHANNEL_STATUS_INVALID	= -1,
        ZMEDIAITEM_CHANNEL_STATUS_COMPLETE	= 0,
        ZMEDIAITEM_CHANNEL_STATUS_INCOMPLETE	= 1,
        ZMEDIAITEM_CHANNEL_STATUS_RETIRED	= 2,
        ZMEDIAITEM_CHANNEL_STATUS_STALE	= 3,
        ZMEDIAITEM_CHANNEL_STATUS_ERROR	= 4
    } 	ZMEDIAITEM_CHANNEL_STATUS;

typedef 
enum _ZMEDIAITEM_CLIP_TYPE
    {
        ZMEDIAITEM_CLIP_TYPE_UNDEFINED	= -1,
        ZMEDIAITEM_CLIP_TYPE_STD_TRACK	= 0,
        ZMEDIAITEM_CLIP_TYPE_30SEC	= 1,
        ZMEDIAITEM_CLIP_TYPE_NOCLIP	= 2,
        ZMEDIAITEM_CLIP_TYPE_STREAM	= 3
    } 	ZMEDIAITEM_CLIP_TYPE;

typedef 
enum _ZMEDIAITEM_ACTIONFLAGS
    {
        ZMEDIAITEM_ACTIONFLAGS_NONE	= 0,
        ZMEDIAITEM_ACTIONFLAGS_PLAY	= 0x1,
        ZMEDIAITEM_ACTIONFLAGS_BUY	= 0x2,
        ZMEDIAITEM_ACTIONFLAGS_ADDTOCOLLECTION	= 0x4
    } 	ZMEDIAITEM_ACTIONFLAGS;

typedef 
enum _ZMEDIAITEM_ACQUIRED_TYPE
    {
        ZMEDIAITEM_FLAG_CAPTURED_ON_DEVICE	= 0x1,
        ZMEDIAITEM_FLAG_RECEIVED_ON_DEVICE	= 0x2,
        ZMEDIAITEM_FLAG_PRELOADED_ON_DEVICE	= 0x3
    } 	ZMEDIAITEM_ACQUIRED_TYPE;

typedef 
enum _ZMEDIAITEM_LICENSESTATE
    {
        ZMEDIAITEM_LICENSESTATE_NONE	= 0,
        ZMEDIAITEM_LICENSESTATE_UNLIMITED	= 1,
        ZMEDIAITEM_LICENSESTATE_USEUNTIL	= 2,
        ZMEDIAITEM_LICENSESTATE_USEONCEGOODFOR24	= 3
    } 	ZMEDIAITEM_LICENSESTATE;

typedef 
enum _ZMEDIAITEM_STREAMSTATUS
    {
        ZMEDIAITEM_STREAMSTATUS_INVALID	= 0,
        ZMEDIAITEM_STREAMSTATUS_NOTSTARTED	= ( ZMEDIAITEM_STREAMSTATUS_INVALID + 1 ) ,
        ZMEDIAITEM_STREAMSTATUS_FETCHING	= ( ZMEDIAITEM_STREAMSTATUS_NOTSTARTED + 1 ) ,
        ZMEDIAITEM_STREAMSTATUS_READY	= ( ZMEDIAITEM_STREAMSTATUS_FETCHING + 1 ) ,
        ZMEDIAITEM_STREAMSTATUS_FETCHED_URL	= ( ZMEDIAITEM_STREAMSTATUS_READY + 1 ) ,
        ZMEDIAITEM_STREAMSTATUS_FETCHED_URL_LICENSE	= ( ZMEDIAITEM_STREAMSTATUS_FETCHED_URL + 1 ) ,
        ZMEDIAITEM_STREAMSTATUS_FAILED	= ( ZMEDIAITEM_STREAMSTATUS_FETCHED_URL_LICENSE + 1 ) ,
        _ZMEDIAITEM_STREAMSTATUS_COUNT	= ( ZMEDIAITEM_STREAMSTATUS_FAILED + 1 ) 
    } 	ZMEDIAITEM_STREAMSTATUS;

typedef 
enum _SmartDjMixState
    {
        SMARTDJMIXSTATE_IDLE	= 0,
        SMARTDJMIXSTATE_GENERATING_LOCAL	= ( SMARTDJMIXSTATE_IDLE + 1 ) ,
        SMARTDJMIXSTATE_GENERATING_MIXED	= ( SMARTDJMIXSTATE_GENERATING_LOCAL + 1 ) ,
        SMARTDJMIXSTATE_GENERATING_MARKETPLACE	= ( SMARTDJMIXSTATE_GENERATING_MIXED + 1 ) ,
        SMARTDJMIXSTATE_ERROR	= ( SMARTDJMIXSTATE_GENERATING_MARKETPLACE + 1 ) 
    } 	SmartDjMixState;

typedef struct _SmartDjStatus
    {
    SmartDjMixState eMixState;
    HRESULT hrResult;
    } 	SmartDjStatus;

typedef struct _ZMEDIAITEM_DSS_ATTRIBUTES
    {
    ULONG eTokenUsageType;
    ULONG eSharePermission;
    ULONG eShareMode;
    ULONG eShareTargetType;
    /* [string] */ LPCWSTR pcwszShareTarget;
    } 	ZMEDIAITEM_DSS_ATTRIBUTES;

typedef 
enum _ZMEDIALIB_STORAGELOCATION_INDEXID
    {
        ZMEDIALIB_STORAGELOCATION_INDEXID_INVALID	= -1,
        ZMEDIALIB_STORAGELOCATION_INDEXID_CLOUD	= 0,
        ZMEDIALIB_STORAGELOCATION_INDEXID_INTERNAL	= 1,
        ZMEDIALIB_STORAGELOCATION_INDEXID_EXTERNAL_0	= 2,
        ZMEDIALIB_STORAGELOCATION_INDEXID_EXTERNAL_1	= 3,
        ZMEDIALIB_STORAGELOCATION_INDEXID_EXTERNAL_2	= 4,
        ZMEDIALIB_STORAGELOCATION_INDEXID_EXTERNAL_3	= 5,
        _ZMEDIALIB_STORAGELOCATION_INDEXID_COUNT	= 6
    } 	ZMEDIALIB_STORAGELOCATION_INDEXID;

typedef 
enum _ZMEDIALIB_STORAGELOCATION_FLAG
    {
        ZMEDIALIB_STORAGELOCATION_FLAG_NONE	= 0,
        ZMEDIALIB_STORAGELOCATION_FLAG_CLOUD	= ( 1 << ZMEDIALIB_STORAGELOCATION_INDEXID_CLOUD ) ,
        ZMEDIALIB_STORAGELOCATION_FLAG_INTERNAL	= ( 1 << ZMEDIALIB_STORAGELOCATION_INDEXID_INTERNAL ) ,
        ZMEDIALIB_STORAGELOCATION_FLAG_EXTERNAL_0	= ( 1 << ZMEDIALIB_STORAGELOCATION_INDEXID_EXTERNAL_0 ) ,
        ZMEDIALIB_STORAGELOCATION_FLAG_EXTERNAL_1	= ( 1 << ZMEDIALIB_STORAGELOCATION_INDEXID_EXTERNAL_1 ) ,
        ZMEDIALIB_STORAGELOCATION_FLAG_EXTERNAL_2	= ( 1 << ZMEDIALIB_STORAGELOCATION_INDEXID_EXTERNAL_2 ) ,
        ZMEDIALIB_STORAGELOCATION_FLAG_EXTERNAL_3	= ( 1 << ZMEDIALIB_STORAGELOCATION_INDEXID_EXTERNAL_3 ) 
    } 	ZMEDIALIB_STORAGELOCATION_FLAG;

#define ZMEDIALIB_STORAGELOCATION_FLAG_EXTERNAL (ZMEDIALIB_STORAGELOCATION_FLAG_EXTERNAL_0 | \
                                                            ZMEDIALIB_STORAGELOCATION_FLAG_EXTERNAL_1 | \
                                                            ZMEDIALIB_STORAGELOCATION_FLAG_EXTERNAL_2 | \
                                                            ZMEDIALIB_STORAGELOCATION_FLAG_EXTERNAL_3)
#define ZMEDIALIB_STORAGELOCATION_INDEXID_TO_FLAG(indexId) ( 1 << indexId )
#define ZMEDIALIB_STORAGELOCATION_INDEXID_TO_MIDX(indexId) ( indexId + MIDX_ALL_ITEMS_STORAGELOCATION_CLOUD )
#define ZMEDIALIB_STORAGELOCATION_FLAG_CLOUD_MASK (ZMEDIALIB_STORAGELOCATION_FLAG_CLOUD)
static const GUID ZMEDIALIB_STORAGELOCATION_CLOUD_STORAGEID = { 0xef65826c, 0xc40a, 0x4a69, { 0xae, 0xaa, 0x93, 0xb9, 0xce, 0xa3, 0x10, 0xfc } };
static const GUID ZMEDIALIB_STORAGELOCATION_INTERNAL_STORAGEID = { 0x1ef4b8c6, 0xf38c, 0x4c89, { 0x94, 0xd4, 0x4a, 0xbe, 0x76, 0x4, 0xfb, 0x48 } };
typedef 
enum _ZMEDIALIB_SAVESONGOPERATION
    {
        ZMEDIALIB_SAVESONGOPERATION_COPY	= 0,
        ZMEDIALIB_SAVESONGOPERATION_MOVE	= 1
    } 	ZMEDIALIB_SAVESONGOPERATION;

typedef struct _ZMEDIALIB_SONGMETADATA
    {
    /* [string] */ LPCWSTR pwszName;
    DWORD dwDurationMSec;
    /* [string] */ LPCWSTR pwszArtistName;
    /* [string] */ LPCWSTR pwszGenreName;
    /* [string] */ LPCWSTR pwszAlbumName;
    DWORD dwTrackNumber;
    /* [string] */ LPCWSTR pwszAlbumArtistName;
    /* [string] */ LPCWSTR pwszAlbumReleaseDate;
    /* [string] */ LPCWSTR pwszAlbumArtToken;
    /* [string] */ LPCWSTR pwszArtistBackgroundToken;
    /* [string] */ LPCWSTR pwszAlbumArtistBackgroundToken;
    } 	ZMEDIALIB_SONGMETADATA;

typedef 
enum _ZMEDIALIB_SAVEUGCOPERATION
    {
        ZMEDIALIB_SAVEUGCOPERATION_NOOP	= 0,
        ZMEDIALIB_SAVEUGCOPERATION_COPY	= 1,
        ZMEDIALIB_SAVEUGCOPERATION_MOVE	= 2
    } 	ZMEDIALIB_SAVEUGCOPERATION;

typedef struct _ZMEDIALIB_UGCMETADATA
    {
    /* [string] */ LPCWSTR pwszName;
    /* [string] */ LPCWSTR pwszArtFileToken;
    /* [string] */ LPCWSTR pwszSmallArtFileToken;
    FILETIME ft;
    DWORD dwWidth;
    DWORD dwHeight;
    DWORD dwOrientation;
    DWORD dwLongitude;
    DWORD dwLatitude;
    DWORD dwAltitude;
    DWORD dwDurationMSec;
    DWORD dwRating;
    DWORD dwRatingPercent;
    } 	ZMEDIALIB_UGCMETADATA;


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */










/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif


#ifndef __RPCNDR_H_VERSION__
//error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__




/* Forward Declarations */ 

/* header files for imported files */
//#include <wtypes.h>
//#include <oaidl.h>


/* interface __MIDL_itf_zmediaqueuetypes_0000_0000 */
/* [local] */ 

#define	ZMEDIAQUEUE_ITEMINDEX_DEFAULT	( 0xffffffff )

#define	ZMEDIAQUEUE_CLIENTQUEUE_COUNT	( 10 )

typedef /* [v1_enum] */ 
enum _ZMEDIAQUEUE
    {
        ZMEDIAQUEUE_INVALID	= 0,
        ZMEDIAQUEUE_AUDIO	= ( ZMEDIAQUEUE_INVALID + 1 ) ,
        ZMEDIAQUEUE_VIDEO	= ( ZMEDIAQUEUE_AUDIO + 1 ) ,
        ZMEDIAQUEUE_AUDIOPODCAST	= ( ZMEDIAQUEUE_VIDEO + 1 ) ,
        ZMEDIAQUEUE_TRANSIENTAUDIO	= ( ZMEDIAQUEUE_AUDIOPODCAST + 1 ) ,
        ZMEDIAQUEUE_RADIO	= ( ZMEDIAQUEUE_TRANSIENTAUDIO + 1 ) ,
        ZMEDIAQUEUE_CLIENTQUEUE_FIRST	= ( ZMEDIAQUEUE_RADIO + 1 ) ,
        ZMEDIAQUEUE_CLIENTQUEUE_LAST	= ( ( ZMEDIAQUEUE_CLIENTQUEUE_FIRST + ZMEDIAQUEUE_CLIENTQUEUE_COUNT )  - 1 ) ,
        _ZMEDIAQUEUE_COUNT	= ( ZMEDIAQUEUE_CLIENTQUEUE_LAST + 1 ) ,
        ZMEDIAQUEUE_ALL	= 0xffffffff
    } 	ZMEDIAQUEUE;

typedef 
enum _ZMEDIAQUEUE_CLIENTQUEUETYPE
    {
        ZMEDIAQUEUE_CLIENTQUEUETYPE_INVALID	= 0,
        ZMEDIAQUEUE_CLIENTQUEUETYPE_AUDIO	= ( ZMEDIAQUEUE_CLIENTQUEUETYPE_INVALID + 1 ) ,
        ZMEDIAQUEUE_CLIENTQUEUETYPE_VIDEO	= ( ZMEDIAQUEUE_CLIENTQUEUETYPE_AUDIO + 1 ) ,
        ZMEDIAQUEUE_CLIENTQUEUETYPE_BACKGROUND_AUDIO	= ( ZMEDIAQUEUE_CLIENTQUEUETYPE_VIDEO + 1 ) ,
        ZMEDIAQUEUE_CLIENTQUEUETYPE_AMBIGUOUS	= ( ZMEDIAQUEUE_CLIENTQUEUETYPE_BACKGROUND_AUDIO + 1 ) 
    } 	ZMEDIAQUEUE_CLIENTQUEUETYPE;

typedef 
enum _ZMEDIAQUEUE_MASK
    {
        ZMEDIAQUEUE_MASK_NONE	= 0,
        ZMEDIAQUEUE_MASK_AUDIO	= ( 1 << ZMEDIAQUEUE_AUDIO ) ,
        ZMEDIAQUEUE_MASK_VIDEO	= ( 1 << ZMEDIAQUEUE_VIDEO ) ,
        ZMEDIAQUEUE_MASK_AUDIOPODCASTS	= ( 1 << ZMEDIAQUEUE_AUDIOPODCAST ) ,
        ZMEDIAQUEUE_MASK_TRANSIENTAUDIO	= ( 1 << ZMEDIAQUEUE_TRANSIENTAUDIO ) ,
        ZMEDIAQUEUE_MASK_RADIO	= ( 1 << ZMEDIAQUEUE_RADIO ) 
    } 	ZMEDIAQUEUE_MASK;

typedef 
enum _ZMEDIAQUEUE_NOTIFICATION
    {
        ZMEDIAQUEUE_NOTIFICATION_INVALID	= 0,
        ZMEDIAQUEUE_NOTIFICATION_PLAYSTATECHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_INVALID + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_PLAYPOSITIONCHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_PLAYSTATECHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_PLAYRATECHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_PLAYPOSITIONCHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_PLAYFLAGSCHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_PLAYRATECHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ITEMCHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_PLAYFLAGSCHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ITEMREADY	= ( ZMEDIAQUEUE_NOTIFICATION_ITEMCHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ITEMCOMPLETE	= ( ZMEDIAQUEUE_NOTIFICATION_ITEMREADY + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ITEMVIEWWINDOWEXPIRED	= ( ZMEDIAQUEUE_NOTIFICATION_ITEMCOMPLETE + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ITEMVIEWINDOWCOUNTEXCEEDED	= ( ZMEDIAQUEUE_NOTIFICATION_ITEMVIEWWINDOWEXPIRED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ITEMEXPIRED	= ( ZMEDIAQUEUE_NOTIFICATION_ITEMVIEWINDOWCOUNTEXCEEDED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ITEMALREADYRECEIVED	= ( ZMEDIAQUEUE_NOTIFICATION_ITEMEXPIRED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_CONTENTSCHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_ITEMALREADYRECEIVED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_VOLUMECHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_CONTENTSCHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_MUTESTATECHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_VOLUMECHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_FREQUENCYCHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_MUTESTATECHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ARTCHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_FREQUENCYCHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_CHAPTERCHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_ARTCHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_METADATACHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_CHAPTERCHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_SHOWSTATECHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_METADATACHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ERROR	= ( ZMEDIAQUEUE_NOTIFICATION_SHOWSTATECHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_RDSREADY	= ( ZMEDIAQUEUE_NOTIFICATION_ERROR + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ANTENNASTATUSCHANGE	= ( ZMEDIAQUEUE_NOTIFICATION_RDSREADY + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ITEMBUFFERING	= ( ZMEDIAQUEUE_NOTIFICATION_ANTENNASTATUSCHANGE + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_VIDEOSIZECHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_ITEMBUFFERING + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_DRM_NEEDLICENSE	= ( ZMEDIAQUEUE_NOTIFICATION_VIDEOSIZECHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_DRM_STATUS	= ( ZMEDIAQUEUE_NOTIFICATION_DRM_NEEDLICENSE + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_VIDEORESOURCELOST	= ( ZMEDIAQUEUE_NOTIFICATION_DRM_STATUS + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ITEMERROR	= ( ZMEDIAQUEUE_NOTIFICATION_VIDEORESOURCELOST + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_UNSOLICITEDPLAYSTATECHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_ITEMERROR + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_CLIENTQUEUEFORURL	= ( ZMEDIAQUEUE_NOTIFICATION_UNSOLICITEDPLAYSTATECHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_SMARTDJSTATUSCHANGED	= ( ZMEDIAQUEUE_NOTIFICATION_CLIENTQUEUEFORURL + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_EXTENDEDAUDIO	= ( ZMEDIAQUEUE_NOTIFICATION_SMARTDJSTATUSCHANGED + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_SHOWSYSTEMPLAYCONTROL	= ( ZMEDIAQUEUE_NOTIFICATION_EXTENDEDAUDIO + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_BACKGROUNDARTAVAILABLE	= ( ZMEDIAQUEUE_NOTIFICATION_SHOWSYSTEMPLAYCONTROL + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_ITEMCONNECTING	= ( ZMEDIAQUEUE_NOTIFICATION_BACKGROUNDARTAVAILABLE + 1 ) ,
        ZMEDIAQUEUE_NOTIFICATION_DRM_DECRYPTOR_SETUP	= ( ZMEDIAQUEUE_NOTIFICATION_ITEMCONNECTING + 1 ) ,
        _ZMEDIAQUEUE_NOTIFICATION_COUNT	= ( ZMEDIAQUEUE_NOTIFICATION_DRM_DECRYPTOR_SETUP + 1 ) 
    } 	ZMEDIAQUEUE_NOTIFICATION;

typedef 
enum _ZMEDIAQUEUE_PLAYFLAGS
    {
        ZMEDIAQUEUE_PLAYFLAGS_SHUFFLE	= 0x1,
        ZMEDIAQUEUE_PLAYFLAGS_REPEAT	= 0x2,
        ZMEDIAQUEUE_PLAYFLAGS_REPEAT_SINGLE	= 0x4
    } 	ZMEDIAQUEUE_PLAYFLAGS;

typedef 
enum _ZMEDIAQUEUE_CONTENTSCHANGED
    {
        ZMEDIAQUEUE_CONTENTSCHANGED_ITEMS_UNCHANGED	= 0,
        ZMEDIAQUEUE_CONTENTSCHANGED_ITEMS_CHANGED	= ( ZMEDIAQUEUE_CONTENTSCHANGED_ITEMS_UNCHANGED + 1 ) 
    } 	ZMEDIAQUEUE_CONTENTSCHANGED;

typedef 
enum _ZMEDIAQUEUE_MOVEFLAGS
    {
        ZMEDIAQUEUE_MOVEFLAGS_NONE	= 0,
        ZMEDIAQUEUE_MOVEFLAGS_PRESERVEBOOKMARK	= 0x1,
        ZMEDIAQUEUE_MOVEFLAGS_STARTATBOOKMARK	= 0x2,
        ZMEDIAQUEUE_MOVEFLAGS_WRAP	= 0x4,
        ZMEDIAQUEUE_MOVEFLAGS_ASYNC	= 0x8000
    } 	ZMEDIAQUEUE_MOVEFLAGS;

typedef 
enum _ZMEDIAQUEUE_CLEANUP
    {
        ZMEDIAQUEUE_CLEANUP_NONE	= 0,
        ZMEDIAQUEUE_CLEANUP_PARTIAL	= ( ZMEDIAQUEUE_CLEANUP_NONE + 1 ) ,
        ZMEDIAQUEUE_CLEANUP_ALL	= ( ZMEDIAQUEUE_CLEANUP_PARTIAL + 1 ) 
    } 	ZMEDIAQUEUE_CLEANUP;

typedef 
enum _ZMEDIAQUEUE_RADIOREGION
    {
        ZMEDIAQUEUE_RADIOREGION_INVALID	= 0,
        ZMEDIAQUEUE_RADIOREGION_USA	= ( ZMEDIAQUEUE_RADIOREGION_INVALID + 1 ) ,
        ZMEDIAQUEUE_RADIOREGION_EUROPE	= ( ZMEDIAQUEUE_RADIOREGION_USA + 1 ) ,
        ZMEDIAQUEUE_RADIOREGION_JAPAN	= ( ZMEDIAQUEUE_RADIOREGION_EUROPE + 1 ) ,
        _ZMEDIAQUEUE_RADIOREGION_COUNT	= ( ZMEDIAQUEUE_RADIOREGION_JAPAN + 1 ) 
    } 	ZMEDIAQUEUE_RADIOREGION;

typedef struct _ZMEDIAQUEUE_RADIO_RTPLUS_TAG
    {
    BOOL fRTPlusItemToggleBit;
    BOOL fRTPlusItemRunningBit;
    BYTE bContentType_tag1;
    BYTE bStartMarker_tag1;
    BYTE bLengthMarker_tag1;
    BYTE bContentType_tag2;
    BYTE bStartMarker_tag2;
    BYTE bLengthMarker_tag2;
    } 	ZMEDIAQUEUE_RADIO_RTPLUS_TAG;

typedef 
enum _ZMEDIAQUEUE_RADIO_RTPLUS_CLASS
    {
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_ITEM_TITLE	= 1,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_ITEM_ALBUM	= 2,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_ITEM_TRACKNUMBER	= 3,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_ITEM_ARTIST	= 4,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_ITEM_COMPOSITION	= 5,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_ITEM_MOVEMENT	= 6,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_ITEM_CONDUCTOR	= 7,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_ITEM_COMPOSER	= 8,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_ITEM_BAND	= 9,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_ITEM_COMMENT	= 10,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_ITEM_GENRE	= 11,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_NEWS	= 12,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_NEWS_LOCAL	= 13,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_STOCKMARKET	= 14,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_SPORT	= 15,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_LOTTERY	= 16,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_HOROSCOPE	= 17,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_DAILY_DIVERSION	= 18,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_HEALTH	= 19,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_EVENT	= 20,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_SCENE	= 21,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_CINEMA	= 22,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_TV	= 23,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_DATE_TIME	= 24,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_WEATHER	= 25,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_TRAFFIC	= 26,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_ALARM	= 27,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_ADVERTISEMENT	= 28,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_URL	= 29,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INFO_OTHER	= 30,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_PROGRAM_STATIONNAME_SHORT	= 31,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_PROGRAM_STATIONNAME_LONG	= 32,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_PROGRAM_NOW	= 33,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_PROGRAM_NEXT	= 34,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_PROGRAM_PART	= 35,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_PROGRAM_HOST	= 36,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_PROGRAM_EDITORIAL_STAFF	= 37,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_PROGRAM_FREQUENCY	= 38,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_PROGRAM_HOMEPAGE	= 39,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_PROGRAM_SUBCHANNEL	= 40,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_PHONE_HOTLINE	= 41,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_PHONE_STUDIO	= 42,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_PHONE_OTHER	= 43,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_SMS_STUDIO	= 44,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_SMS_OTHER	= 45,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_EMAIL_HOTLINE	= 46,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_EMAIL_STUDIO	= 47,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_EMAIL_OTHER	= 48,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_MMS_OTHER	= 49,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_CHAT	= 50,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_CHAT_CENTER	= 51,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_VOTE_QUESTION	= 52,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_INTERACTIVITY_VOTE_CENTER	= 53,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_DESCRIPTOR_PLACE	= 59,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_DESCRIPTOR_APPOINTMENT	= 60,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_DESCRIPTOR_IDENTIFIER	= 61,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_DESCRIPTOR_PURCHASE	= 62,
        ZMEDIAQUEUE_RADIO_RTPLUS_CLASS_DESCRIPTOR_GET_DATA	= 63
    } 	ZMEDIAQUEUE_RADIO_RTPLUS_CLASS;

typedef struct _ZMEDIAQUEUE_RADIO_IDI
    {
    DWORD dwData[ 16 ];
    BOOL fDataReady[ 16 ];
    } 	ZMEDIAQUEUE_RADIO_IDI;

typedef struct _ZMEDIAQUEUE_RADIO_STATION_INFO
    {
    WCHAR name[ 9 ];
    } 	ZMEDIAQUEUE_RADIO_STATION_INFO;

typedef 
enum _ZMEDIAQUEUE_PLAYSTATE
    {
        ZMEDIAQUEUE_PLAYSTATE_INVALID	= 0,
        ZMEDIAQUEUE_PLAYSTATE_UNKNOWN	= ( ZMEDIAQUEUE_PLAYSTATE_INVALID + 1 ) ,
        ZMEDIAQUEUE_PLAYSTATE_LOADING	= ( ZMEDIAQUEUE_PLAYSTATE_UNKNOWN + 1 ) ,
        ZMEDIAQUEUE_PLAYSTATE_PLAYING	= ( ZMEDIAQUEUE_PLAYSTATE_LOADING + 1 ) ,
        ZMEDIAQUEUE_PLAYSTATE_PAUSED	= ( ZMEDIAQUEUE_PLAYSTATE_PLAYING + 1 ) ,
        ZMEDIAQUEUE_PLAYSTATE_STOPPED	= ( ZMEDIAQUEUE_PLAYSTATE_PAUSED + 1 ) ,
        ZMEDIAQUEUE_PLAYSTATE_FASTFORWARDING	= ( ZMEDIAQUEUE_PLAYSTATE_STOPPED + 1 ) ,
        ZMEDIAQUEUE_PLAYSTATE_REWINDING	= ( ZMEDIAQUEUE_PLAYSTATE_FASTFORWARDING + 1 ) ,
        _ZMEDIAQUEUE_PLAYSTATE_COUNT	= ( ZMEDIAQUEUE_PLAYSTATE_REWINDING + 1 ) 
    } 	ZMEDIAQUEUE_PLAYSTATE;

typedef 
enum _ZMEDIAQUEUE_PROGRESSIVEPLAYMODE
    {
        ZMEDIAQUEUE_PROGRESSIVEPLAYMODE_INVALID	= 0,
        ZMEDIAQUEUE_PROGRESSIVEPLAYMODE_OFF	= ( ZMEDIAQUEUE_PROGRESSIVEPLAYMODE_INVALID + 1 ) ,
        ZMEDIAQUEUE_PROGRESSIVEPLAYMODE_FORWARD	= ( ZMEDIAQUEUE_PROGRESSIVEPLAYMODE_OFF + 1 ) ,
        ZMEDIAQUEUE_PROGRESSIVEPLAYMODE_REVERSE	= ( ZMEDIAQUEUE_PROGRESSIVEPLAYMODE_FORWARD + 1 ) ,
        _ZMEDIAQUEUE_PROGRESSIVEPLAYMODE_COUNT	= ( ZMEDIAQUEUE_PROGRESSIVEPLAYMODE_REVERSE + 1 ) 
    } 	ZMEDIAQUEUE_PROGRESSIVEPLAYMODE;

typedef 
enum _MEDIAITEM_VIDEO_ZOOM_MODE
    {
        MEDIAITEM_VIDEO_ZOOM_NONE	= 0,
        MEDIAITEM_VIDEO_ZOOM_WIDE_SCREEN	= ( MEDIAITEM_VIDEO_ZOOM_NONE + 1 ) 
    } 	MEDIAITEM_VIDEO_ZOOM_MODE;

#define	ZMEDIAQUEUE_VIZDATA_FREQSLOTS	( 256 )

#define	ZMEDIAQUEUE_VIZDATA_WAVESLOTS	( 256 )

typedef struct _ZMEDIAQUEUE_VIZDATA
    {
    float rgFreqData[ 256 ];
    float rgWaveData[ 256 ];
    } 	ZMEDIAQUEUE_VIZDATA;

typedef 
enum _ZMEDIAQUEUE_SEEKDIR
    {
        ZMEDIAQUEUE_SEEKDIR_INVALID	= 0,
        ZMEDIAQUEUE_SEEKDIR_DOWN	= ( ZMEDIAQUEUE_SEEKDIR_INVALID + 1 ) ,
        ZMEDIAQUEUE_SEEKDIR_UP	= ( ZMEDIAQUEUE_SEEKDIR_DOWN + 1 ) ,
        _ZMEDIAQUEUE_SEEKDIR_COUNT	= ( ZMEDIAQUEUE_SEEKDIR_UP + 1 ) 
    } 	ZMEDIAQUEUE_SEEKDIR;

typedef 
enum _ZMEDIAQUEUE_STATIONTEXT
    {
        ZMEDIAQUEUE_STATIONTEXT_NAME	= 0,
        ZMEDIAQUEUE_STATIONTEXT_CALLSIGN	= ( ZMEDIAQUEUE_STATIONTEXT_NAME + 1 ) ,
        ZMEDIAQUEUE_STATIONTEXT_DESCRIPTION	= ( ZMEDIAQUEUE_STATIONTEXT_CALLSIGN + 1 ) ,
        _ZMEDIAQUEUE_STATIONTEXT_COUNT	= ( ZMEDIAQUEUE_STATIONTEXT_DESCRIPTION + 1 ) 
    } 	ZMEDIAQUEUE_STATIONTEXT;

typedef 
enum _ZMEDIAQUEUE_STATIONGENRE
    {
        ZMEDIAQUEUE_STATIONGENRE_INVALID	= 0,
        ZMEDIAQUEUE_STATIONGENRE_NEWS	= ( ZMEDIAQUEUE_STATIONGENRE_INVALID + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_INFORMATION	= ( ZMEDIAQUEUE_STATIONGENRE_NEWS + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_SPORTS	= ( ZMEDIAQUEUE_STATIONGENRE_INFORMATION + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_TALK	= ( ZMEDIAQUEUE_STATIONGENRE_SPORTS + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_ROCK	= ( ZMEDIAQUEUE_STATIONGENRE_TALK + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_CLASSICROCK	= ( ZMEDIAQUEUE_STATIONGENRE_ROCK + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_ADULTHITS	= ( ZMEDIAQUEUE_STATIONGENRE_CLASSICROCK + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_SOFTROCK	= ( ZMEDIAQUEUE_STATIONGENRE_ADULTHITS + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_TOP40	= ( ZMEDIAQUEUE_STATIONGENRE_SOFTROCK + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_COUNTRY	= ( ZMEDIAQUEUE_STATIONGENRE_TOP40 + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_OLDIES	= ( ZMEDIAQUEUE_STATIONGENRE_COUNTRY + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_SOFT	= ( ZMEDIAQUEUE_STATIONGENRE_OLDIES + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_NOSTALGIA	= ( ZMEDIAQUEUE_STATIONGENRE_SOFT + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_JAZZ	= ( ZMEDIAQUEUE_STATIONGENRE_NOSTALGIA + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_CLASSICAL	= ( ZMEDIAQUEUE_STATIONGENRE_JAZZ + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_RANDB	= ( ZMEDIAQUEUE_STATIONGENRE_CLASSICAL + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_SOFTRANDB	= ( ZMEDIAQUEUE_STATIONGENRE_RANDB + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_LANGUAGE	= ( ZMEDIAQUEUE_STATIONGENRE_SOFTRANDB + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_RELIGIOUSMUSIC	= ( ZMEDIAQUEUE_STATIONGENRE_LANGUAGE + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_RELIGIOUSTALK	= ( ZMEDIAQUEUE_STATIONGENRE_RELIGIOUSMUSIC + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_PERSONALITY	= ( ZMEDIAQUEUE_STATIONGENRE_RELIGIOUSTALK + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_PUBLIC	= ( ZMEDIAQUEUE_STATIONGENRE_PERSONALITY + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_COLLEGE	= ( ZMEDIAQUEUE_STATIONGENRE_PUBLIC + 1 ) ,
        _ZMEDIAQUEUE_STATIONGENRE_UNASSIGNED18	= ( ZMEDIAQUEUE_STATIONGENRE_COLLEGE + 1 ) ,
        _ZMEDIAQUEUE_STATIONGENRE_UNASSIGNED19	= ( _ZMEDIAQUEUE_STATIONGENRE_UNASSIGNED18 + 1 ) ,
        _ZMEDIAQUEUE_STATIONGENRE_UNASSIGNED1A	= ( _ZMEDIAQUEUE_STATIONGENRE_UNASSIGNED19 + 1 ) ,
        _ZMEDIAQUEUE_STATIONGENRE_UNASSIGNED1B	= ( _ZMEDIAQUEUE_STATIONGENRE_UNASSIGNED1A + 1 ) ,
        _ZMEDIAQUEUE_STATIONGENRE_UNASSIGNED1C	= ( _ZMEDIAQUEUE_STATIONGENRE_UNASSIGNED1B + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_WEATHER	= ( _ZMEDIAQUEUE_STATIONGENRE_UNASSIGNED1C + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_EMERGENCYTEST	= ( ZMEDIAQUEUE_STATIONGENRE_WEATHER + 1 ) ,
        ZMEDIAQUEUE_STATIONGENRE_EMERGENCY	= ( ZMEDIAQUEUE_STATIONGENRE_EMERGENCYTEST + 1 ) ,
        _ZMEDIAQUEUE_STATIONGENRE_COUNT	= ( ZMEDIAQUEUE_STATIONGENRE_EMERGENCY + 1 ) 
    } 	ZMEDIAQUEUE_STATIONGENRE;

typedef 
enum _ZMEDIAQUEUE_HDRADIO_STATUS
    {
        ZMEDIAQUEUE_SIGNAL_ANALOG	= 0,
        ZMEDIAQUEUE_SIGNAL_HDLINKING	= 1,
        ZMEDIAQUEUE_SIGNAL_HDDETECTED	= 2
    } 	ZMEDIAQUEUE_HDRADIO_STATUS;

typedef 
enum _ZMEDIAQUEUE_SEEKFLAGS
    {
        ZMEDIAQUEUE_SEEKFLAGS_WRAP	= 0x1
    } 	ZMEDIAQUEUE_SEEKFLAGS;

#define	ZMEDIAQUEUE_MIN_VOLUME	( -10000 )

#define	ZMEDIAQUEUE_MAX_VOLUME	( 0 )

typedef struct _ZMEDIAQUEUE_NOTIFICATIONDATA
    {
    ZMEDIAQUEUE queue;
    ZMEDIAQUEUE_NOTIFICATION notifyCode;
    size_t idxItem1;
    size_t idxItem2;
    size_t param1;
    } 	ZMEDIAQUEUE_NOTIFICATIONDATA;

typedef 
enum _ZMEDIAQUEUE_STREAMDATA_HINTFLAGS
    {
        ZMEDIAQUEUE_STREAMDATA_HINTFLAGS_NAME	= 0x1,
        ZMEDIAQUEUE_STREAMDATA_HINTFLAGS_ARTIST	= 0x2,
        ZMEDIAQUEUE_STREAMDATA_HINTFLAGS_ALBUM	= 0x4,
        ZMEDIAQUEUE_STREAMDATA_HINTFLAGS_NUMBER	= 0x8,
        ZMEDIAQUEUE_STREAMDATA_HINTFLAGS_EXPLICIT	= 0x10,
        ZMEDIAQUEUE_STREAMDATA_HINTFLAGS_DURATION	= 0x20,
        ZMEDIAQUEUE_STREAMDATA_HINTFLAGS_ARTIST_MEDIAID	= 0x40,
        ZMEDIAQUEUE_STREAMDATA_HINTFLAGS_RIGHT_PREVIEW	= 0x80,
        ZMEDIAQUEUE_STREAMDATA_HINTFLAGS_RIGHT_FULLSTREAM	= 0x100
    } 	ZMEDIAQUEUE_STREAMDATA_HINTFLAGS;

typedef struct _ZMEDIAQUEUE_HDTUNEPARAMS
    {
    ZMEDIAQUEUE_HDRADIO_STATUS hdStatus;
    BYTE ucSubChannels;
    } 	ZMEDIAQUEUE_HDTUNEPARAMS;

typedef struct _ZMEDIAQUEUE_TUNEPARAMS
    {
    int kHz;
    BYTE subChannel;
    ZMEDIAQUEUE_HDTUNEPARAMS HDParams;
    } 	ZMEDIAQUEUE_TUNEPARAMS;

typedef 
enum _ZMEDIAQUEUE_EQUALIZER_PRESET
    {
        ZMEDIAQUEUE_EQUALIZER_PRESET_NONE	= 0,
        ZMEDIAQUEUE_EQUALIZER_PRESET_ACOUSTIC	= ( ZMEDIAQUEUE_EQUALIZER_PRESET_NONE + 1 ) ,
        ZMEDIAQUEUE_EQUALIZER_PRESET_CLASSICAL	= ( ZMEDIAQUEUE_EQUALIZER_PRESET_ACOUSTIC + 1 ) ,
        ZMEDIAQUEUE_EQUALIZER_PRESET_ELECTRONICA	= ( ZMEDIAQUEUE_EQUALIZER_PRESET_CLASSICAL + 1 ) ,
        ZMEDIAQUEUE_EQUALIZER_PRESET_HIPHOP	= ( ZMEDIAQUEUE_EQUALIZER_PRESET_ELECTRONICA + 1 ) ,
        ZMEDIAQUEUE_EQUALIZER_PRESET_JAZZ	= ( ZMEDIAQUEUE_EQUALIZER_PRESET_HIPHOP + 1 ) ,
        ZMEDIAQUEUE_EQUALIZER_PRESET_POP	= ( ZMEDIAQUEUE_EQUALIZER_PRESET_JAZZ + 1 ) ,
        ZMEDIAQUEUE_EQUALIZER_PRESET_ROCK	= ( ZMEDIAQUEUE_EQUALIZER_PRESET_POP + 1 ) ,
        ZMEDIAQUEUE_EQUALIZER_PRESET_DEBUG	= ( ZMEDIAQUEUE_EQUALIZER_PRESET_ROCK + 1 ) 
    } 	ZMEDIAQUEUE_EQUALIZER_PRESET;

typedef 
enum _ZMEDIAQUEUE_FFTRESULTS
    {
        ZMEDIAQUEUE_FFTRESULTS_LINEAR_SCALE_RAW	= 0,
        ZMEDIAQUEUE_FFTRESULTS_LINEAR_SCALE_SMOOTH	= ( ZMEDIAQUEUE_FFTRESULTS_LINEAR_SCALE_RAW + 1 ) ,
        ZMEDIAQUEUE_FFTRESULTS_LOG_SCALE_RAW	= ( ZMEDIAQUEUE_FFTRESULTS_LINEAR_SCALE_SMOOTH + 1 ) ,
        ZMEDIAQUEUE_FFTRESULTS_LOG_SCALE_SMOOTH	= ( ZMEDIAQUEUE_FFTRESULTS_LOG_SCALE_RAW + 1 ) ,
        _ZMEDIAQUEUE_FFTRESULTS_COUNT	= ( ZMEDIAQUEUE_FFTRESULTS_LOG_SCALE_SMOOTH + 1 ) 
    } 	ZMEDIAQUEUE_FFTRESULTS;

#define	ZMQ_PROPERTY_BUFFERING_TIME_DEFAULT	( 5 )

#define	ZMQ_PROPERTY_AUDIO_BALANCE_DEFAULT	( 10000 )

#define	ZMQ_PROPERTY_AUDIO_BALANCE_MAX	( 20000 )

#define	ZMQ_PROPERTY_AUDIO_BALANCE_OFFSET	( 10000 )

typedef 
enum _ZMEDIAQUEUE_AUDIOENDPOINT
    {
        ZMEDIAQUEUE_AUDIOENDPOINT_INVALID	= 0,
        ZMEDIAQUEUE_AUDIOENDPOINT_AUTO	= ( ZMEDIAQUEUE_AUDIOENDPOINT_INVALID + 1 ) ,
        ZMEDIAQUEUE_AUDIOENDPOINT_HEADSET	= ( ZMEDIAQUEUE_AUDIOENDPOINT_AUTO + 1 ) ,
        ZMEDIAQUEUE_AUDIOENDPOINT_SPEAKER	= ( ZMEDIAQUEUE_AUDIOENDPOINT_HEADSET + 1 ) ,
        _ZMEDIAQUEUE_AUDIOENDPOINT_COUNT	= ( ZMEDIAQUEUE_AUDIOENDPOINT_SPEAKER + 1 ) 
    } 	ZMEDIAQUEUE_AUDIOENDPOINT;

typedef 
enum _ZMEDIAQUEUE_RADIO_ANTENNATYPE
    {
        ZMEDIAQUEUE_RADIO_ANTENNATYPE_EXTERNAL	= 0,
        ZMEDIAQUEUE_RADIO_ANTENNATYPE_INTERNAL	= ( ZMEDIAQUEUE_RADIO_ANTENNATYPE_EXTERNAL + 1 ) 
    } 	ZMEDIAQUEUE_RADIO_ANTENNATYPE;

typedef 
enum _ZMEDIAQUEUE_PROPERTY
    {
        ZMQ_PROPERTY_FRAMES_PER_SECOND	= 0,
        ZMQ_PROPERTY_DROPPED_FRAMES	= ( ZMQ_PROPERTY_FRAMES_PER_SECOND + 1 ) ,
        ZMQ_PROPERTY_CAN_SEEK	= ( ZMQ_PROPERTY_DROPPED_FRAMES + 1 ) ,
        ZMQ_PROPERTY_CAN_PAUSE	= ( ZMQ_PROPERTY_CAN_SEEK + 1 ) ,
        ZMQ_PROPERTY_AUDIO_BALANCE	= ( ZMQ_PROPERTY_CAN_PAUSE + 1 ) ,
        ZMQ_PROPERTY_BUFFERING_TIME	= ( ZMQ_PROPERTY_AUDIO_BALANCE + 1 ) ,
        ZMQ_PROPERTY_BUFFERING_PROGRESS	= ( ZMQ_PROPERTY_BUFFERING_TIME + 1 ) ,
        ZMQ_PROPERTY_DOWNLOAD_PROGRESS	= ( ZMQ_PROPERTY_BUFFERING_PROGRESS + 1 ) ,
        ZMQ_PROPERTY_DROPPED_FRAMES_PER_SECOND	= ( ZMQ_PROPERTY_DOWNLOAD_PROGRESS + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_AUDIOROUTINGPREFERENCE	= ( ZMQ_PROPERTY_DROPPED_FRAMES_PER_SECOND + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_RADIO_ANTENNATYPE	= ( ZMEDIAQUEUE_PROPERTY_AUDIOROUTINGPREFERENCE + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_RADIO_ANTENNASTATUS	= ( ZMEDIAQUEUE_PROPERTY_RADIO_ANTENNATYPE + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_RADIO_SUSPEND_PLAYSTATE	= ( ZMEDIAQUEUE_PROPERTY_RADIO_ANTENNASTATUS + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_REBUILDINPROGRESS	= ( ZMEDIAQUEUE_PROPERTY_RADIO_SUSPEND_PLAYSTATE + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_MSSSTREAMING_ITEM	= ( ZMEDIAQUEUE_PROPERTY_REBUILDINPROGRESS + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_BACKGROUNDART_REFCOUNT	= ( ZMEDIAQUEUE_PROPERTY_MSSSTREAMING_ITEM + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_OWNER_PROCESSID	= ( ZMEDIAQUEUE_PROPERTY_BACKGROUNDART_REFCOUNT + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_APP_PRODUCTID	= ( ZMEDIAQUEUE_PROPERTY_OWNER_PROCESSID + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_APP_TITLE	= ( ZMEDIAQUEUE_PROPERTY_APP_PRODUCTID + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_APP_ART	= ( ZMEDIAQUEUE_PROPERTY_APP_TITLE + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_APP_ACTIVATION_URI	= ( ZMEDIAQUEUE_PROPERTY_APP_ART + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_APP_CONTEXT	= ( ZMEDIAQUEUE_PROPERTY_APP_ACTIVATION_URI + 1 ) ,
        ZMEDIAQUEUE_PROPERTY_APP_ACTIVATION_ARGS	= ( ZMEDIAQUEUE_PROPERTY_APP_CONTEXT + 1 ) 
    } 	ZMEDIAQUEUE_PROPERTY;

typedef /* [public] */ struct __MIDL___MIDL_itf_zmediaqueuetypes_0000_0000_0001
    {
    HRESULT m_hrPlayback;
    char m_errorMsg[ 50 ];
    char m_url[ 300 ];
    SYSTEMTIME m_utcTime;
    char m_ethernetType[ 15 ];
    GUID m_mediaId;
    DWORD m_dwBufferingCount;
    char m_hostIP[ 20 ];
    DWORD m_dwInitialBufferingDuration;
    DWORD m_dwPlaybackStartDuration;
    DWORD m_dwStartMs;
    DWORD m_dwEndMs;
    } 	PlaybackTelemetryData;



//extern RPC_IF_HANDLE __MIDL_itf_zmediaqueuetypes_0000_0000_v0_0_c_ifspec;
//extern RPC_IF_HANDLE __MIDL_itf_zmediaqueuetypes_0000_0000_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */











static const HRESULT ZERROR_E_NOTINITIALIZED           = (HRESULT)0x803A0000;
static const HRESULT ZERROR_E_NODATA                   = (HRESULT)0x803A0001;
static const HRESULT ZERROR_E_NOTFOUND                 = (HRESULT)0x803A0002;
static const HRESULT ZERROR_E_NOTOPEN                  = (HRESULT)0x803A0003;
static const HRESULT ZERROR_E_ALREADYOPEN              = (HRESULT)0x803A0004;
static const HRESULT ZERROR_E_MULTIPLE_OWNER_MCARDS    = (HRESULT)0x803A0005;
static const HRESULT ZERROR_E_OUTOFDATE                = (HRESULT)0x803A0006;
static const HRESULT ZERROR_E_DRM                      = (HRESULT)0x803A0007;
static const HRESULT ZERROR_E_DRMLICENSEEXPIRED        = (HRESULT)0x803A0008;
static const HRESULT ZERROR_E_DRMPLAYCOUNTEXPIRED      = (HRESULT)0x803A0009;
static const HRESULT ZERROR_E_UNSUPPORTEDCONTENT       = (HRESULT)0x803A000A;
static const HRESULT ZERROR_E_UNSUPPORTEDATTR          = (HRESULT)0x803A000B;
static const HRESULT ZERROR_E_DATABASEFULL             = (HRESULT)0x803A000C;
static const HRESULT ZERROR_E_TASKQUEUEFULL            = (HRESULT)0x803A000D;
static const HRESULT ZERROR_E_NOMORECHAPTERS           = (HRESULT)0x803A000E;
static const HRESULT ZERROR_E_CONTENTEXPLICIT          = (HRESULT)0x803A000F;
static const HRESULT ZERROR_E_STREAMNOTAVAILABLE       = (HRESULT)0x803A0010;
static const HRESULT ZERROR_E_DEVICE_NOTAUDIBLEACTIVATED = (HRESULT)0x803A0011;
static const HRESULT ZERROR_E_MESSAGE_TOO_LARGE        = (HRESULT)0x803A0012;
static const HRESULT ZERROR_E_DRMTVFAILURE             = (HRESULT)0x803A0013;

// Begin WM7 zerrors
static const HRESULT ZERROR_E_NO_STREAM                = (HRESULT)0x803A0080;
static const HRESULT ZERROR_E_READ_JIBBER_JABBER       = (HRESULT)0x803A0081;
static const HRESULT ZERROR_E_INVALID_FEED             = (HRESULT)0x803A0082;
static const HRESULT ZERROR_E_NOCURRENTITEM            = (HRESULT)0x803A0083;
static const HRESULT ZERROR_E_YOUR_DIR_IS_A_FILE       = (HRESULT)0x803A0084;
static const HRESULT ZERROR_E_CREATE_DIR_LIED          = (HRESULT)0x803A0085;
static const HRESULT ZERROR_E_ZLIB_UNHAPPY             = (HRESULT)0x803A0086;
static const HRESULT ZERROR_E_ZLIB_STREAM_TOO_SHORT    = (HRESULT)0x803A0087;
static const HRESULT ZERROR_E_STORAGE                  = (HRESULT)0x803A0088;
static const HRESULT ZERROR_E_WINMO_UNSUPPORTED_QUEUE  = (HRESULT)0x803A0089;
static const HRESULT ZERROR_E_WRITE_ACCESS_DENIED      = (HRESULT)0x803A008A;
static const HRESULT ZERROR_E_URL_FETCH_TIMEOUT        = (HRESULT)0x803A00C0;
static const HRESULT ZERROR_E_TOO_MANY_CLIENT_QUEUES   = (HRESULT)0x803A00D0;
static const HRESULT ZERROR_E_QUEUE_NOT_ALLOCATED      = (HRESULT)0x803A00D1;
static const HRESULT ZERROR_E_NO_URL_PARAMS            = (HRESULT)0x803A00D3;
static const HRESULT ZERROR_E_BAD_SMARTDJ_STORE        = (HRESULT)0x803A00D4;
static const HRESULT ZERROR_E_DB_GENERATION_MISMATCH   = (HRESULT)0x803A00D5;
static const HRESULT ZERROR_E_SMARTDJ_ARTIST_TOO_FREQUENT           = (HRESULT)0x803A00D6;
static const HRESULT ZERROR_E_SMARTDJ_SONG_TOO_SHORT                = (HRESULT)0x803A00D7;
static const HRESULT ZERROR_E_SMARTDJ_USER_HATES_SONG               = (HRESULT)0x803A00D8;
static const HRESULT ZERROR_E_SMARTDJ_SONG_ALREADY_ADDED            = (HRESULT)0x803A00D9;
static const HRESULT ZERROR_E_SMARTDJ_EXPLICIT_SONG_NOT_ALLOWED     = (HRESULT)0x803A00DA;
static const HRESULT ZERROR_E_SMARTDJ_ONLINE_SONG_IS_SO_LAST_WEEK   = (HRESULT)0x803A00DB;
static const HRESULT ZERROR_E_SMARTDJ_NO_MARKETPLACE_MIX_FOR_ARTIST = (HRESULT)0x803A00DC;
static const HRESULT ZERROR_E_SMARTDJ_NO_MARKETPLACE_ID_FOR_SEED    = (HRESULT)0x803A00DD;
static const HRESULT ZERROR_E_SMARTDJ_NO_VECTOR_FOR_SEED            = (HRESULT)0x803A00DE;
static const HRESULT ZERROR_E_SMARTDJ_NO_MATCHES_FOR_SEED           = (HRESULT)0x803A00DF;

// Begin Mango zerrors
static const HRESULT ZERROR_E_ZMDBGENERALFAIL          = (HRESULT)0x803A00C1;
static const HRESULT ZERROR_E_ZMDB_BLOCKUNPINNED       = (HRESULT)0x803A00C2;
static const HRESULT ZERROR_E_ZMDB_INVALIDBLOCKOFFSET  = (HRESULT)0x803A00C3;
static const HRESULT ZERROR_E_INVALID_ATTR_VALUE       = (HRESULT)0x803A00C4;
static const HRESULT ZERROR_E_ZMDB_FAILEDBLOCKINTEGRITY= (HRESULT)0x804A00C5;
static const HRESULT ZERROR_E_ZMDB_MIGRATION_NEEDED    = (HRESULT)0x804A00C6;
static const HRESULT ZERROR_E_ALREADYEXISTS            = (HRESULT)0x803A00C7;

static const HRESULT ZERROR_E_UNEXPECTED_WIN32_ERROR   = (HRESULT)0x803A0FFF;

static const HRESULT ZERROR_E_INSUFFICIENT_BUFFER      = (HRESULT)0x8007007A;  // 0x7A = 122L = ERROR_INSUFFICIENT_BUFFER
static const HRESULT ZERROR_E_ACCESS_DENIED            = (HRESULT)0x80070005;  // 0x05 = 5L = ERROR_ACCESS_DENIED
static const HRESULT ZERROR_E_NOMORE                   = (HRESULT)0x80070103;  // 0x103 = 259L = ERROR_NO_MORE_ITEMS


// Apollo
static const HRESULT ZERROR_E_INVALID_SERVICE_HANDLE                 = (HRESULT)0x803A00E0;
static const HRESULT ZERROR_E_CALL_MADE_FROM_RPC_THREAD              = (HRESULT)0x803A00E1;
static const HRESULT ZERROR_E_THREAD_ALREADY_HAS_ACTIVE_RPC_CONTEXT  = (HRESULT)0x803A00E2;
static const HRESULT ZERROR_E_THREAD_HAS_NO_ACTIVE_RPC_CONTEXT       = (HRESULT)0x803A00E3;
static const HRESULT ZERROR_E_INVALID_LIST_HANDLE                    = (HRESULT)0x803A00E4;
static const HRESULT ZERROR_E_NO_FREE_LIST_HANDLES                   = (HRESULT)0x803A00E5;
static const HRESULT ZERROR_E_SPECIAL_FOLDER_DELETE_ACCESS_DENIED    = (HRESULT)0x803A00E6;
static const HRESULT ZERROR_E_FOLDER_DELETE_NOT_EMPTY                = (HRESULT)0x803A00E7;
static const HRESULT ZERROR_E_WNF_SUBSCRIBE_FAILURE                  = (HRESULT)0x803A00E8;
static const HRESULT ZERROR_E_WNF_COULDNT_REGISTER_GLOBAL_STATE_NAME = (HRESULT)0x803A00E9;
static const HRESULT ZERROR_E_WNF_PUBLISH_FAILURE                    = (HRESULT)0x803A00EA;
static const HRESULT ZERROR_E_ALREADY_INITIALIZED                    = (HRESULT)0x803A00EB;
static const HRESULT ZERROR_E_USER_DECLINED_DELETE                   = (HRESULT)0x803A00EC;
static const HRESULT ZERROR_E_UNSUPPORTED_IMAGE_TYPE                 = (HRESULT)0x803A00ED;
static const HRESULT ZERROR_E_RECEIPTCACHECORRUPT                    = (HRESULT)0x803A00EE;
static const HRESULT ZERROR_E_RECEIPTFILEWRITEFAILED                 = (HRESULT)0x803A00EF;













#define ZMEDIALIST_SAFE_RELEASE(hZMediaList) \
    if (NULL != hZMediaList) \
    { \
        ZMediaList_Release(hZMediaList); \
        hZMediaList = NULL; \
    }

__inline ZMEDIAITEM_TYPE ZMEDIAITEM_TYPEOF(
    ZMEDIAITEM item
    )
{
    return (ZMEDIAITEM_TYPE)(((UINT)item) >> 24);
}

__inline ZMEDIAITEM_ATTRIBUTE_TYPE ZMEDIAITEM_ATTRIBUTE_TYPEOF(
    ZMEDIAITEM_ATTRIBUTE miAttr
    )
{
    return (ZMEDIAITEM_ATTRIBUTE_TYPE)(miAttr & ZMEDAIITEM_ATTRIBUTE_TYPE_MASK);
}

__inline ZMEDIAITEM ZMEDIAITEM_FROM_ZMDBKEY(
    ULONG ZmdbKey
    )
{
    return (ZMEDIAITEM)ZmdbKey;
}

__inline ULONG ZMDBKEY_FROM_ZMEDIAITEM(
    ZMEDIAITEM ZmdbKey
    )
{
    return (ULONG)ZmdbKey;
}

//
// Zune's ZMediaLib_Open/Close are intended for the lifetime of the device.
// On Windows Mobile, we want to allow callers to "require" and "release" the
// ZMDB; thus, when no one is using the ZMDB, it can be unloaded from memory.
//
// You might want to use an auto_ZMediaLibRequirement 
//
#define WINAPI __stdcall
HRESULT WINAPI ZMediaLib_RequireLibrary();

HRESULT WINAPI ZMediaLib_ReleaseLibrary();

struct auto_ZMediaLibRequirement
{
    BOOL m_fRequired;
    FARPROC auto_ZMediaLibRequirement;
    FARPROC _auto_ZMediaLibRequirement;
    FARPROC Require;
    FARPROC Release;
};


HRESULT WINAPI ZMediaLib_IsOpen(
     BOOL* pfOpen
    );

HRESULT WINAPI ZMediaLib_EnableAsync(
    BOOL fAsync
    );

HRESULT WINAPI ZMediaLib_IsAsyncEnabled(
     BOOL* pfAsync
    );
/*
interface DECLSPEC_UUID("DED257DD-53FD-4CD2-9CA9-68359ED2DE3B")
IZMediaLibNotificationListener : IUnknown
{
    STDMETHOD_(void, OnZMediaLibNotification)(const ZMEDIALIB_NOTIFICATION *pNotification) = 0;
};
*/

struct IZMediaLibNotificationListener {
	FARPROC QueryInterface;
	FARPROC AddRef;
	FARPROC Release;
	FARPROC OnZMediaLibNotification;
};

HRESULT WINAPI ZMediaLib_RegisterNotificationListener(
     IZMediaLibNotificationListener* pListener
    );

void ZMediaLib_UnregisterNotificationListener(
     IZMediaLibNotificationListener* pListener
    );

HRESULT WINAPI ZMediaLib_CreateList(
    ZMEDIALIST_TYPE type,
     ZMEDIAITEM itemParam,
     HZMEDIALIST* phList
    );

HRESULT WINAPI ZMediaLib_CreateListEx(
    ZMEDIALIST_TYPE type,
     ZMEDIAITEM itemParam,
     DWORD rgfStorageFilter,
     DWORD* prgfStorageType,
     HZMEDIALIST* phList
    );

HRESULT WINAPI ZMediaLib_GetItemIntAttribute(
    ZMEDIAITEM item,
    ZMEDIAITEM_INTATTRIBUTE attrib,
     int* piVal
    );

HRESULT WINAPI ZMediaLib_SetItemIntAttribute(
    ZMEDIAITEM item,
    ZMEDIAITEM_INTATTRIBUTE attrib,
    int iVal
    );

HRESULT WINAPI ZMediaLib_GetItemGuidAttribute(
    ZMEDIAITEM item,
    ZMEDIAITEM_GUIDATTRIBUTE attrib,
     GUID* pVal
    );

HRESULT WINAPI ZMediaLib_SetItemGuidAttribute(
    ZMEDIAITEM item,
    ZMEDIAITEM_GUIDATTRIBUTE attrib,
    GUID val
    );

HRESULT WINAPI ZMediaLib_GetItemStringAttribute(
    ZMEDIAITEM item,
    ZMEDIAITEM_STRINGATTRIBUTE attrib,
     WCHAR* szVal,
    size_t cchVal,
    size_t* pcchValNeeded
    );

HRESULT WINAPI ZMediaLib_GetItemStringAttribute_Kernel(
    ZMEDIAITEM item,
    ZMEDIAITEM_STRINGATTRIBUTE attrib,
     WCHAR* szVal,
    size_t cchVal,
    size_t* pcchValNeeded
    );

HRESULT WINAPI ZMediaLib_SetItemStringAttribute(
    ZMEDIAITEM item,
    ZMEDIAITEM_STRINGATTRIBUTE attrib,
     const WCHAR* szVal
    );

HRESULT WINAPI ZMediaLib_GetItemDateTimeAttribute(
    ZMEDIAITEM item,
    ZMEDIAITEM_DATETIMEATTRIBUTE attrib,
     FILETIME* pTime
    );

HRESULT WINAPI ZMediaLib_SetItemDateTimeAttribute(
    ZMEDIAITEM item,
    ZMEDIAITEM_DATETIMEATTRIBUTE attrib,
    const FILETIME* pTime
    );

HRESULT WINAPI ZMediaLib_GetNamedItemAttribute(
    ZMEDIAITEM item,
    const WCHAR* szAttrib,
     void* pvVal,
    size_t cbVal,
    size_t* pcbValNeeded
    );

HRESULT WINAPI ZMediaLib_SetNamedItemAttribute(
    ZMEDIAITEM item,
    const WCHAR* szAttrib,
     const void* pvVal,
    size_t cbVal
    );

HRESULT WINAPI ZMediaLib_IncrementItemIntAttribute(
    ZMEDIAITEM item,
    ZMEDIAITEM_INTATTRIBUTE attr,
    int iIncrementValue,
    int* piNewValue
    );

HRESULT WINAPI ZMediaLib_AddPlaylistItem(
    ZMEDIAITEM playlist,
    ZMEDIAITEM childItem
    );

HRESULT WINAPI ZMediaLib_RemovePlaylistItem(
    ZMEDIAITEM playlist,
     ZMEDIAITEM childItem
    );

HRESULT WINAPI ZMediaLib_ClearPlaylist(
    ZMEDIAITEM playlist
    );
    
HRESULT ZMediaLib_AddCloudPlaylistItem(
    ZMEDIAITEM playlist,
    ZMEDIAITEM childItem,
    const GUID* pguidItemId
    );

HRESULT WINAPI ZMediaLib_GetItemThumbnail(
    ZMEDIAITEM item,
    ZMEDIAITEM_THUMBTYPE thumbType,
    void* pvVal,
    size_t cbVal,
    size_t* pcbValNeeded
    );

HRESULT WINAPI ZMediaLib_SetItemThumbnail(
    ZMEDIAITEM item,
    ZMEDIAITEM_THUMBTYPE thumbType,
     const void* pvVal,
    size_t cbVal
    );

HRESULT WINAPI ZMediaLib_UpdateItemThumbnail(
    ZMEDIAITEM item,
    ZMEDIAITEM_THUMBTYPE thumbType
    );

HRESULT WINAPI ZMediaLib_UpdateItemThumbnails(
    ZMEDIAITEM item
    );

HRESULT WINAPI ZMediaLib_IsItemArtPresent(
    ZMEDIAITEM item,
     BOOL* pfItemArtPresent
    );

HRESULT WINAPI ZMediaLib_IsSpecialItem(
    ZMEDIAITEM item,
    const WCHAR* szSpecialItemKey,
     BOOL* pfIsSpecialItem
    );

HRESULT WINAPI ZMediaLib_AddItem(
    ZMEDIAITEM_TYPE type,
     ZMEDIAITEM* pItem
    );

HRESULT WINAPI ZMediaLib_RemoveItem(
    ZMEDIAITEM item,
    BOOL fPermanent
    );

HRESULT WINAPI ZMediaLib_RemoveCloudSyncItem(
    ZMEDIAITEM item
    );

HRESULT WINAPI ZMediaLib_RemoveItemAndStaleRelations(
    ZMEDIAITEM zmi,
    BOOL fPermanent
    );

HRESULT WINAPI ZMediaLib_SetRelatedItem(
    ZMEDIAITEM item,
    ZMEDIAITEM_RELATION relation,
     ZMEDIAITEM relatedItem
    );

HRESULT WINAPI ZMediaLib_GetRelatedItem(
    ZMEDIAITEM item,
    ZMEDIAITEM_RELATION relation,
     ZMEDIAITEM* pItemRelated
    );

HRESULT WINAPI ZMediaLib_ValidateItem(
    ZMEDIAITEM item
    );

HRESULT WINAPI ZMediaLib_GetSpecialItem(
    ZMEDIASPECIALITEM itemSpecial,
     ZMEDIAITEM* pItem
    );

HRESULT WINAPI ZMediaLib_GetLocale(
     LCID* pLocale
    );

HRESULT WINAPI ZMediaLib_SetLocale(
    LCID locale
    );

HRESULT WINAPI ZMediaLib_Flush(void);

HRESULT WINAPI ZMediaLib_BlockFlush(void);

HRESULT WINAPI ZMediaLib_UnblockFlush(void);

HRESULT WINAPI ZMediaLib_SetItemVisibility(
    ZMEDIAITEM item,
    ZMEDIAITEM_VISIBILITY visibility
    );

HRESULT WINAPI ZMediaLib_GetItemVisibility(
    ZMEDIAITEM item,
     ZMEDIAITEM_VISIBILITY *pVisibility
    );

HRESULT WINAPI ZMediaLib_ReIndex(void);

HRESULT WINAPI ZMediaLib_Repair(void);

HRESULT WINAPI ZMediaLib_ClearVideoToken(void);

HRESULT WINAPI ZMediaLib_ClearRichDisplayItem(void);

HRESULT WINAPI ZMediaList_AddRef(
    HZMEDIALIST hList
    );

HRESULT WINAPI ZMediaList_Release(
     HZMEDIALIST hList
    );

// FIXME: ZMediaLib_FindItemByXXX should be changed to have an 
//         BOOL *pfFound and return S_OK / *pfFound==FALSE if the 
//        item isn't found.
//        The current implementation is to (quiet)-originate ZERROR_E_NOTFOUND.
HRESULT WINAPI ZMediaList_FindItemByStringAttribute(
    HZMEDIALIST hList,
    ZMEDIAITEM_STRINGATTRIBUTE attrib,
    const WCHAR* szVal,
     ZMEDIAITEM* pItem
    );

HRESULT WINAPI ZMediaList_FindItemByGuidAttribute(
    HZMEDIALIST hList,
    ZMEDIAITEM_GUIDATTRIBUTE attrib,
    const GUID* pGuid,
     ZMEDIAITEM* pItem
    );

HRESULT WINAPI ZMediaList_GetType(
    HZMEDIALIST hList,
    ZMEDIALIST_TYPE* pType,
    ZMEDIAITEM* pItemParam
    );

HRESULT WINAPI ZMediaList_GetItemCount(
    HZMEDIALIST hList,
     size_t* pcItems
    );

HRESULT WINAPI ZMediaList_GetItem(
    HZMEDIALIST hList,
    size_t iItem,
     ZMEDIAITEM* pItem
    );

HRESULT WINAPI ZMediaList_GetItems(
    HZMEDIALIST hList,
    size_t iFirstItem,
    ZMEDIAITEM* rgItems,
    size_t cItems,
    size_t* pcItemsFetched
    );

HRESULT WINAPI ZMediaList_GetItems_Kernel(
    HZMEDIALIST hList,
    size_t iFirstItem,
    ZMEDIAITEM* rgItems,
    size_t cItems,
    size_t* pcItemsFetched
    );

HRESULT WINAPI ZMediaList_GetItemIndex(
    HZMEDIALIST hList,
    ZMEDIAITEM item,
    size_t  startIndex,
     size_t* piItem
    );

HRESULT WINAPI ZMediaList_Flatten(
    HZMEDIALIST hList,
     HZMEDIALIST* phFlattenedList
    );

HRESULT WINAPI ZMediaList_FlattenEx(
    HZMEDIALIST hList,
    size_t iItem,
     HZMEDIALIST* phFlattenedList,
     size_t* piFlattenedItem
    );

HRESULT WINAPI ZMediaList_AddLetters(
    HZMEDIALIST hList,
     HZMEDIALIST* phLetteredList
    );

HRESULT WINAPI ZMediaList_Resync(
    HZMEDIALIST hList
    );

HRESULT WINAPI ZMediaList_FilterList(
    HZMEDIALIST hzmlListToFilter,
     ZMEDIAITEM_STRINGATTRIBUTE  attribs[],
    size_t cAttribs,
    const WCHAR* pwszSubString,
     HZMEDIALIST* phzmlFilteredList
    );

HRESULT WINAPI ZMediaList_FilterList_Kernel(
    HZMEDIALIST hzmlListToFilter,
     ZMEDIAITEM_STRINGATTRIBUTE  attribs[],
    size_t cAttribs,
    const WCHAR* pwszSubString,
     HZMEDIALIST* phzmlFilteredList
    );

HRESULT WINAPI ZMediaLib_AddYamanoteQuicklaunchItem(
    ZMEDIAITEM_QUICKLAUNCH_LIST WhichList,
    LPCWSTR Title,
    LPCWSTR Context,
    LPCWSTR AppUri,
    LPCWSTR Reactivation,    
     const void* pvVal,
    size_t cbVal
    );
    
HRESULT WINAPI ZMediaLib_CopyItems(
     ZMEDIAITEM* rgItems,
    size_t cItems,
    ZMEDIALIB_STORAGELOCATION_FLAG eStorageDestination,
     HZMEDIAWORKITEM* phWorkItem
    );

#define ZMEDIALIB_COPYITEMS_FLAG_DELAY_FLUSH    (0x00000001UL)

HRESULT WINAPI ZMediaLib_CopyItemsEx(
    ULONG CopyFlags,
     ZMEDIAITEM* rgItems,
    size_t cItems,
    ZMEDIALIB_STORAGELOCATION_FLAG eStorageDestination,
     HZMEDIAWORKITEM* phWorkItem
    );
    
HRESULT WINAPI ZMediaLib_BulkMove(
    ZMEDIALIB_STORAGELOCATION_FLAG eStorageSource,
    ZMEDIALIB_STORAGELOCATION_FLAG eStorageDestination,
     HZMEDIAWORKITEM* phWorkItem
    );

#define ZMEDIALIB_MOVEITEMS_FLAG_DELAY_FLUSH    (0x00000001UL)

HRESULT WINAPI ZMediaLib_BulkMoveEx(
    ULONG MoveFlags,
    ZMEDIALIB_STORAGELOCATION_FLAG eStorageSource,
    ZMEDIALIB_STORAGELOCATION_FLAG eStorageDestination,
     HZMEDIAWORKITEM* phWorkItem
    );

HRESULT WINAPI ZMediaLib_IsCopyInProgress(
     BOOL* pfCopyInProgress,
    LONGLONG* pllCurrentBytes,
    LONGLONG* pllTotalBytes
    );

HRESULT WINAPI ZMediaLib_CancelWork(
    HZMEDIAWORKITEM hWorkItem
    );

HRESULT ZMediaLib_CopyItemAttributes(
    ZMEDIAITEM zmi,
    ZMEDIAITEM zmiNew
    );      


// Call this function to get your process exclusive write access to the ZMDB.
// Until you call ZMediaLib_WriteUnlock, other processes'
// attempts to call ZMediaLib_xxx functions that write to the ZMDB will
// immediately return ZERROR_E_WRITEACCESS_DENIED.
// PC sync will hold exclusive write access, since we don't want the library
// contents shifting during sync.  Regular old simple writes to the ZMDB
// (e.g. editing some metadata) don't need to bother with this.
//
// Consider using auto_ZMediaLibWriteLock
//
HRESULT WINAPI ZMediaLib_WriteLock(
    ZMEDIALIB_WRITELOCK_TYPE dwWriteLockType,
    DWORD msWaitTime
    );

HRESULT WINAPI ZMediaLib_WriteUnlock(
    );

struct auto_ZMediaLibWriteLock
{
    BOOL m_fLocked;
     auto_ZMediaLibRequirement m_azmlReq;

    FARPROC auto_ZMediaLibWriteLock;
    FARPROC _auto_ZMediaLibWriteLock;
    FARPROC Lock;//(ZMEDIALIB_WRITELOCK_TYPE dwWriteLockType, DWORD msWaitTime = 0);
    FARPROC Unlock;
};

// Handy functionality from ZMediaHelpers.cpp.  Has legit link dependencies on
// things like ZDevice_xxx which means it's better done inside
// ZMedia
HRESULT WINAPI ZMediaLib_ReportItemAcquired(
    ZMEDIAITEM item
    );

HRESULT WINAPI ZMediaLib_ReportItemModified(
    ZMEDIAITEM item
    );

HRESULT WINAPI ZMediaLib_AddItemToWorkQueue(
    PCWSTR pszQueueNamedItemAttribute,
    ZMEDIAITEM item
    );

HRESULT WINAPI ZMediaLib_RemoveItemFromWorkQueue(
    PCWSTR pszNamedItemAttribute,
    ZMEDIAITEM item
    );

HRESULT WINAPI ZMediaLib_GetNextWorkItem(
    PCWSTR pszNamedItemAttribute,
     ZMEDIAITEM zmiPrevious,
     ZMEDIAITEM* pItem
    );

HRESULT WINAPI ZMediaLib_ReportLibraryModified(
    );

HRESULT WINAPI ZMediaLib_GeneratePictureArt(
    ZMEDIAITEM item,
     LPWSTR pwzArtFilePath,
     LPCWSTR pwszScratchFolder
    );

HRESULT WINAPI ZMediaLib_WriteArtBufferToArtPath(
     LPCWSTR wszDestPath,
     BYTE* pbBuffer,
    UINT cbBufferSize);

HRESULT WINAPI ZMediaLib_GenerateSmallThumbnail(
    ZMEDIAITEM item,
     LPWSTR pwzArtFilePath
    );

HRESULT WINAPI ZMediaLib_GeneratePictureArtFromBuffer(
    ZMEDIAITEM item,
    BYTE* pbBuffer, 
    UINT cbBufferSize
    );

HRESULT WINAPI ZMediaLib_GetItemStreamOnProperty(
    ZMEDIAITEM item,
    ZMEDIAITEM_STRINGATTRIBUTE attrib,
     ZMEDIAITEMSTREAM *pStream
    );

HRESULT WINAPI ZMediaLib_CloseMediaItemStream(
    ZMEDIAITEMSTREAM stream
    );

HRESULT WINAPI ZMediaLib_ReadItemStream(
    ZMEDIAITEMSTREAM stream,
    PVOID DataBuffer,
    ULONG cbSize,
     ULONG *pcbReadSize
    );

HRESULT WINAPI ZMediaLib_SeekItemStream(
    ZMEDIAITEMSTREAM stream,
    LARGE_INTEGER offset,
    ULONG origin,
     ULARGE_INTEGER *pNewPosition
    );

HRESULT WINAPI ZMediaLib_GetSizeItemStream(
    ZMEDIAITEMSTREAM stream,
     ULARGE_INTEGER *pSize
    );

#define ZMEDIALIB_TRANSFER_BYCOPY 1
#define ZMEDIALIB_TRANSFER_BYMOVE 2

HRESULT WINAPI ZMediaLib_TransferFile(
    ZMEDIAITEM item,
    ZMEDIAITEM_STRINGATTRIBUTE attrib,
    DWORD dwAction,
    PCWSTR pszDssTokenId
    );

HRESULT WINAPI ZMediaLib_GetCoverImage(
    ZMEDIAITEM zmiFolder,
     ZMEDIAITEM* pCoverPhoto
    );

HRESULT WINAPI ZMediaLib_GetSpecialFolder(
    ZMEDIAFOLDER_TYPE zmfType,
     ZMEDIAITEM *pItem
    );

HRESULT WINAPI ZMediaLib_GetReadToken(
    ZMEDIAITEM item,
    ZMEDIAITEM_STRINGATTRIBUTE attrib,
    ZMEDIAITEM_DSS_ATTRIBUTES dssAttrib,
     WCHAR* szToken,
    size_t cchToken,
    size_t* pcchTokenNeeded
    );

HRESULT WINAPI ZMediaLib_GetDatabaseHandle(
    LPCWSTR pszShareTarget,
     HANDLE* phZuneDB
    );

HRESULT WINAPI ZMediaLib_GetSpecialFolderPath(
    ZMEDIAFOLDER_TYPE zmfType,
    DWORD dwStorageDeviceType,
    DWORD dwStorageDeviceInstance,
     WCHAR* szPath,
    size_t cchPath,
    size_t* pcchPathNeeded
    );

HRESULT WINAPI ZMediaLib_GetTotalMediaSize(
    ZMEDIALIST_TYPE listType,
    DWORD rgfStorageFilter,
     ULONGLONG* pullBytes,
     ULONG* pulCount);

HRESULT WINAPI ZMediaLib_MakeFilePathValid(
    ZMEDIAITEM zmi);

HRESULT WINAPI ZMediaLib_IsItemAvailable(
     ZMEDIAITEM zmi,
      BOOL* pfAvailable);

__inline BOOL ZMediaLib_IsAbstractType( 
     ZMEDIAITEM_TYPE zmiType)
{
    return ((!(zmiType == ZMEDIAITEM_TYPE_AUDIO ||
              zmiType == ZMEDIAITEM_TYPE_VIDEO ||
              zmiType == ZMEDIAITEM_TYPE_PICTURE ||
              zmiType == ZMEDIAITEM_TYPE_PODCASTAUDIO)) &&      
              (zmiType != ZMEDIAITEM_TYPE_INVALID));    
}

__inline  BOOL ZMediaLib_IsAbstractItem( 
     ZMEDIAITEM zmi)
{
    return ZMediaLib_IsAbstractType(ZMEDIAITEM_TYPEOF(zmi));
}

HRESULT WINAPI ZMediaLib_GetStorageIndex(
    GUID StorageId, 
     ZMEDIALIB_STORAGELOCATION_INDEXID* peStorageCard);

__inline  BOOL ZMediaLib_ItemStorageIsExternal(
    ZMEDIAITEM zmi)
{
    int rgfStorageFlags = 0;

    ZMediaLib_GetItemIntAttribute(
        zmi,
        ZMEDIAITEM_ATTRIBUTE_STORAGELOCATION,
        &rgfStorageFlags);

    return (rgfStorageFlags & ZMEDIALIB_STORAGELOCATION_FLAG_EXTERNAL);
}

__inline  BOOL ZMediaLib_ItemStorageIsInternal(
    ZMEDIAITEM zmi)
{
    int rgfStorageFlags = 0;

    // Ignore failure
    ZMediaLib_GetItemIntAttribute(
        zmi,
        ZMEDIAITEM_ATTRIBUTE_STORAGELOCATION,
        &rgfStorageFlags);

    return (rgfStorageFlags & ZMEDIALIB_STORAGELOCATION_FLAG_INTERNAL);
}

__inline  BOOL ZMediaLib_ItemStorageIsCloud(
    ZMEDIAITEM zmi)
{
    int rgfStorageFlags = 0;

    // Ignore failure
    ZMediaLib_GetItemIntAttribute(
        zmi,
        ZMEDIAITEM_ATTRIBUTE_STORAGELOCATION,
        &rgfStorageFlags);

    return (rgfStorageFlags & ZMEDIALIB_STORAGELOCATION_FLAG_CLOUD);
}

HRESULT WINAPI ZMediaLib_PurgeExternalStorageCards();

HRESULT WINAPI ZMediaLib_AddItemsToReactiveLicenseAcquisitionQueue(
     ZMEDIAITEM * pItems,
    size_t cItems );


HRESULT WINAPI ZMediaLib_SaveSong(
    LPCWSTR pwszFilenameToken,
     const ZMEDIALIB_SONGMETADATA* pSongMetadata,
    ZMEDIALIB_SAVESONGOPERATION eOperation,
     ZMEDIAITEM* pzmiAdded);

HRESULT WINAPI ZMediaLib_DeleteSong(ZMEDIAITEM zmi);

HRESULT WINAPI ZMediaLib_SaveUgc(
    LPCWSTR pwszFilenameToken,
    ZMEDIALIB_SAVEUGCOPERATION eOperation,
    ZMEDIAFOLDER_TYPE zmfType,
    ZMEDIAITEM_TYPE zmiType,
    BOOL fGenerateUniqueName,
    const ZMEDIALIB_UGCMETADATA* pUgcMetadata,
     ZMEDIAITEM* pzmiAdded);

HRESULT WINAPI ZMediaLib_DeleteUgc(
    ZMEDIAITEM zmi,
    BOOL fPermanent);

HRESULT WINAPI ZMediaLib_GeneratePictureArtByFilePath(
    LPCWSTR pwszFilePath,
     LPWSTR pwzArtFilePath,
    UINT cchArtFilePath,
     LPCWSTR pwszScratchFolder
    );

HRESULT WINAPI ZMediaLib_GenerateSmallThumbnailByFilePath(
    LPCWSTR pwszFilePath,
    ZMEDIAITEM_TYPE zmiType,
    int nOrientation,
    LPWSTR pwzArtFilePath,
    UINT cchArtFilePath
    );

HRESULT WINAPI ZMediaLib_GeneratePictureArtFromBufferByFilePath(
    LPCWSTR wszArtPath,
     BYTE* pbBuffer, 
    UINT cbBufferSize
    );













HRESULT WINAPI ZMediaQueue_EnableViz(DWORD unknow, BOOL enable);
HRESULT WINAPI ZMediaQueue_GetActiveSongIndex(DWORD unknow, int *songIndex);
HRESULT WINAPI ZMediaQueue_GetPlayPosition(DWORD unknow, int *position);
HRESULT WINAPI ZMediaQueue_GetPlayState(DWORD unknow, ZMEDIAQUEUE_PLAYSTATE *state);
HRESULT WINAPI ZMediaQueue_GetRepeat(DWORD unknow, BOOL *repeat);
HRESULT WINAPI ZMediaQueue_GetShuffle(DWORD unknow, BOOL *shuffle);
HRESULT WINAPI ZMediaQueue_GetSongAtIndex(DWORD unknow, int index, ZMEDIAITEM *song);
HRESULT WINAPI ZMediaQueue_GetSongCount(DWORD unknow, int *songCount);
HRESULT WINAPI ZMediaQueue_GetVizData(DWORD unknow, float frequencies[], int freqLen, float samples[], int sampleLen);
HRESULT WINAPI ZMediaQueue_GetVolume(DWORD unknow, float *volume);
HRESULT WINAPI ZMediaQueue_IsMuted(DWORD unknow, BOOL *muted);
HRESULT WINAPI ZMediaQueue_IsVizEnabled(DWORD unknow, BOOL *enabled);
HRESULT WINAPI ZMediaQueue_MoveNext();
HRESULT WINAPI ZMediaQueue_MovePrev();
HRESULT WINAPI ZMediaQueue_MoveTo(DWORD unknow, int songIndex);
HRESULT WINAPI ZMediaQueue_Mute(DWORD unknow, BOOL mute);
HRESULT WINAPI ZMediaQueue_PlaySong(DWORD unknow, ZMEDIAITEM song);
HRESULT WINAPI ZMediaQueue_PlaySongFromFile(DWORD unknow, LPCWSTR name, LPCWSTR path, int duration);
HRESULT WINAPI ZMediaQueue_PlaySongFromURL(DWORD unknow, LPCWSTR name, LPCWSTR url);
HRESULT WINAPI ZMediaQueue_PlaySongList(DWORD unknow, HZMEDIALIST songList, int index);
HRESULT WINAPI ZMediaQueue_SetPlayPosition(DWORD unknow, int position);
HRESULT WINAPI ZMediaQueue_SetPlayState(DWORD unknow, ZMEDIAQUEUE_PLAYSTATE state);
HRESULT WINAPI ZMediaQueue_SetRepeat(DWORD unknow, BOOL repeat);
HRESULT WINAPI ZMediaQueue_SetShuffle(DWORD unknow, BOOL shuffle);
HRESULT WINAPI ZMediaQueue_SetVolume(DWORD unknow, float volume);

#ifdef __cplusplus
}
#endif